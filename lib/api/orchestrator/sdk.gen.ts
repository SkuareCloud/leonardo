// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetScenariosScenariosGetData, GetScenariosScenariosGetResponse, GetScenariosScenariosGetError, CreateScenarioScenariosPostData, CreateScenarioScenariosPostResponse, CreateScenarioScenariosPostError, GetScenarioScenariosScenarioIdGetData, GetScenarioScenariosScenarioIdGetResponse, GetScenarioScenariosScenarioIdGetError, UpdateScenarioScenariosScenarioIdPutData, UpdateScenarioScenariosScenarioIdPutResponse, UpdateScenarioScenariosScenarioIdPutError, GetScenarioChildrensScenariosScenarioIdChildrensGetData, GetScenarioChildrensScenariosScenarioIdChildrensGetError, GetScenarioParentsScenariosScenarioIdParentGetData, GetScenarioParentsScenariosScenarioIdParentGetError, CancelScenarioScenariosScenarioIdCancelPostData, CancelScenarioScenariosScenarioIdCancelPostResponse, CancelScenarioScenariosScenarioIdCancelPostError, RerunScenarioScenariosScenarioIdRerunGetData, RerunScenarioScenariosScenarioIdRerunGetResponse, RerunScenarioScenariosScenarioIdRerunGetError, GetActionActionsActionIdGetData, GetActionActionsActionIdGetResponse, GetActionActionsActionIdGetError, UpdateActionStatusActionsActionIdStatusPutData, UpdateActionStatusActionsActionIdStatusPutResponse, UpdateActionStatusActionsActionIdStatusPutError, GetEventsToProcessScheduledEventsGetData, GetEventsToProcessScheduledEventsGetResponse, CreateScheduledEventScheduledEventsPostData, CreateScheduledEventScheduledEventsPostResponse, CreateScheduledEventScheduledEventsPostError, GetScheduledEventScheduledEventsEventIdGetData, GetScheduledEventScheduledEventsEventIdGetResponse, GetScheduledEventScheduledEventsEventIdGetError, GetAllCharactersCharactersGetData, GetAllCharactersCharactersGetResponse, GetAllCharactersCharactersGetError, CreateCharacterCharactersPostData, CreateCharacterCharactersPostResponse, CreateCharacterCharactersPostError, DeleteCharacterCharactersCharacterIdDeleteData, DeleteCharacterCharactersCharacterIdDeleteError, GetCharacterCharactersCharacterIdGetData, GetCharacterCharactersCharacterIdGetResponse, GetCharacterCharactersCharacterIdGetError, UpdateCharacterCharactersCharacterIdPutData, UpdateCharacterCharactersCharacterIdPutResponse, UpdateCharacterCharactersCharacterIdPutError, GetCharacterByNameCharactersNameNameGetData, GetCharacterByNameCharactersNameNameGetResponse, GetCharacterByNameCharactersNameNameGetError, GetBotCharactersCharactersBotsGetData, GetBotCharactersCharactersBotsGetResponse, GetHumanCharactersCharactersHumansGetData, GetHumanCharactersCharactersHumansGetResponse, GetCharacterChatsCharactersCharacterIdChatsGetData, GetCharacterChatsCharactersCharacterIdChatsGetResponse, GetCharacterChatsCharactersCharacterIdChatsGetError, AddCharacterToChatCharactersCharacterIdChatsChatIdPostData, AddCharacterToChatCharactersCharacterIdChatsChatIdPostError, GetSlotsCountCharactersSlotsCountGetData, GetSlotsCountCharactersSlotsCountGetResponse, GetOriginsCharactersOriginsGetData, GetOriginsCharactersOriginsGetResponse, GetOriginsCharactersOriginsOriginCharactersGetData, GetOriginsCharactersOriginsOriginCharactersGetResponse, GetOriginsCharactersOriginsOriginCharactersGetError, GetAllChatsChatsGetData, GetAllChatsChatsGetResponse, GetAllChatsChatsGetError, CreateChatChatsPostData, CreateChatChatsPostResponse, CreateChatChatsPostError, DeleteChatChatsChatIdDeleteData, DeleteChatChatsChatIdDeleteError, GetChatChatsChatIdGetData, GetChatChatsChatIdGetResponse, GetChatChatsChatIdGetError, UpdateChatChatsChatIdPutData, UpdateChatChatsChatIdPutResponse, UpdateChatChatsChatIdPutError, GetChatByUsernameChatsUsernameUsernameGetData, GetChatByUsernameChatsUsernameUsernameGetResponse, GetChatByUsernameChatsUsernameUsernameGetError, GetChatCharactersChatsChatIdCharactersGetData, GetChatCharactersChatsChatIdCharactersGetResponse, GetChatCharactersChatsChatIdCharactersGetError, RemoveCharacterFromChatChatsChatIdCharactersCharacterIdDeleteData, RemoveCharacterFromChatChatsChatIdCharactersCharacterIdDeleteError, AddCharacterToChatChatsChatIdCharactersCharacterIdPostData, AddCharacterToChatChatsChatIdCharactersCharacterIdPostError, GetChatsByCategoryIdChatsChatCategoriesChatCategoryIdGetData, GetChatsByCategoryIdChatsChatCategoriesChatCategoryIdGetResponse, GetChatsByCategoryIdChatsChatCategoriesChatCategoryIdGetError, GetCategoriesChatsCategoriesGetData, GetCategoriesChatsCategoriesGetResponse, GetChatsByCategoryChatsCategoriesCategoryChatsGetData, GetChatsByCategoryChatsCategoriesCategoryChatsGetResponse, GetChatsByCategoryChatsCategoriesCategoryChatsGetError, SubmitScenarioScenarioPostOperatorScenarioPostData, SubmitScenarioScenarioPostOperatorScenarioPostResponse, SubmitScenarioScenarioPostOperatorScenarioPostError, GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetData, GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetResponse, GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetError, SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostData, SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostResponse, SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostError, SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostData, SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostResponse, SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostError, GetMissionsMissionsGetData, GetMissionsMissionsGetResponse, GetMissionsMissionsGetError, CreateMissionMissionsPostData, CreateMissionMissionsPostResponse, CreateMissionMissionsPostError, GetMissionsByTypeMissionsTypeMissionTypeGetData, GetMissionsByTypeMissionsTypeMissionTypeGetResponse, GetMissionsByTypeMissionsTypeMissionTypeGetError, DeleteMissionMissionsMissionIdDeleteData, DeleteMissionMissionsMissionIdDeleteError, GetMissionMissionsMissionIdGetData, GetMissionMissionsMissionIdGetResponse, GetMissionMissionsMissionIdGetError, UpdateMissionMissionsMissionIdPutData, UpdateMissionMissionsMissionIdPutResponse, UpdateMissionMissionsMissionIdPutError, RunMissionMissionsRunMissionMissionIdPostData, RunMissionMissionsRunMissionMissionIdPostResponse, RunMissionMissionsRunMissionMissionIdPostError, PlanMissionMissionsPlanMissionMissionIdPostData, PlanMissionMissionsPlanMissionMissionIdPostResponse, PlanMissionMissionsPlanMissionMissionIdPostError, CancelMissionMissionsCancelMissionMissionIdPostData, CancelMissionMissionsCancelMissionMissionIdPostResponse, CancelMissionMissionsCancelMissionMissionIdPostError, CreateMission2MissionsCreateMission2PostData, CreateMission2MissionsCreateMission2PostResponse, CreateMission2MissionsCreateMission2PostError, GetMissionsStatisticsMissionsStatisticsGetData, GetMissionsStatisticsMissionsStatisticsGetResponse, GetMissionsStatisticsMissionsStatisticsGetError, GetAllChatCategoriesChatsCategoriesGetData, GetAllChatCategoriesChatsCategoriesGetResponse, CreateChatCategoryChatsCategoriesPostData, CreateChatCategoryChatsCategoriesPostResponse, CreateChatCategoryChatsCategoriesPostError, DeleteChatCategoryChatsCategoriesChatCategoryIdDeleteData, DeleteChatCategoryChatsCategoriesChatCategoryIdDeleteError, GetChatCategoryChatsCategoriesChatCategoryIdGetData, GetChatCategoryChatsCategoriesChatCategoryIdGetResponse, GetChatCategoryChatsCategoriesChatCategoryIdGetError, UpdateChatCategoryChatsCategoriesChatCategoryIdPutData, UpdateChatCategoryChatsCategoriesChatCategoryIdPutResponse, UpdateChatCategoryChatsCategoriesChatCategoryIdPutError, GetRootChatCategoryChatsCategoriesRootGetData, GetRootChatCategoryChatsCategoriesRootGetResponse, GetChatCategoryChildrensChatsCategoriesChatCategoryIdChildrensGetData, GetChatCategoryChildrensChatsCategoriesChatCategoryIdChildrensGetResponse, GetChatCategoryChildrensChatsCategoriesChatCategoryIdChildrensGetError, GetChatCategoryDescendantsChatsCategoriesChatCategoryIdDescendantsGetData, GetChatCategoryDescendantsChatsCategoriesChatCategoryIdDescendantsGetResponse, GetChatCategoryDescendantsChatsCategoriesChatCategoryIdDescendantsGetError, RootGetData, HealthHealthGetData } from './types.gen';
import { zGetScenariosScenariosGetResponse, zCreateScenarioScenariosPostResponse, zGetScenarioScenariosScenarioIdGetResponse, zUpdateScenarioScenariosScenarioIdPutResponse, zCancelScenarioScenariosScenarioIdCancelPostResponse, zRerunScenarioScenariosScenarioIdRerunGetResponse, zGetActionActionsActionIdGetResponse, zUpdateActionStatusActionsActionIdStatusPutResponse, zGetEventsToProcessScheduledEventsGetResponse, zCreateScheduledEventScheduledEventsPostResponse, zGetScheduledEventScheduledEventsEventIdGetResponse, zGetAllCharactersCharactersGetResponse, zCreateCharacterCharactersPostResponse, zGetCharacterCharactersCharacterIdGetResponse, zUpdateCharacterCharactersCharacterIdPutResponse, zGetCharacterByNameCharactersNameNameGetResponse, zGetBotCharactersCharactersBotsGetResponse, zGetHumanCharactersCharactersHumansGetResponse, zGetCharacterChatsCharactersCharacterIdChatsGetResponse, zGetSlotsCountCharactersSlotsCountGetResponse, zGetOriginsCharactersOriginsGetResponse, zGetOriginsCharactersOriginsOriginCharactersGetResponse, zGetAllChatsChatsGetResponse, zCreateChatChatsPostResponse, zGetChatChatsChatIdGetResponse, zUpdateChatChatsChatIdPutResponse, zGetChatByUsernameChatsUsernameUsernameGetResponse, zGetChatCharactersChatsChatIdCharactersGetResponse, zGetChatsByCategoryIdChatsChatCategoriesChatCategoryIdGetResponse, zGetCategoriesChatsCategoriesGetResponse, zGetChatsByCategoryChatsCategoriesCategoryChatsGetResponse, zSubmitScenarioScenarioPostOperatorScenarioPostResponse, zGetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetResponse, zSendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostResponse, zSendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostResponse, zGetMissionsMissionsGetResponse, zCreateMissionMissionsPostResponse, zGetMissionsByTypeMissionsTypeMissionTypeGetResponse, zGetMissionMissionsMissionIdGetResponse, zUpdateMissionMissionsMissionIdPutResponse, zRunMissionMissionsRunMissionMissionIdPostResponse, zPlanMissionMissionsPlanMissionMissionIdPostResponse, zCancelMissionMissionsCancelMissionMissionIdPostResponse, zCreateMission2MissionsCreateMission2PostResponse, zGetMissionsStatisticsMissionsStatisticsGetResponse, zGetAllChatCategoriesChatsCategoriesGetResponse, zCreateChatCategoryChatsCategoriesPostResponse, zGetChatCategoryChatsCategoriesChatCategoryIdGetResponse, zUpdateChatCategoryChatsCategoriesChatCategoryIdPutResponse, zGetRootChatCategoryChatsCategoriesRootGetResponse, zGetChatCategoryChildrensChatsCategoriesChatCategoryIdChildrensGetResponse, zGetChatCategoryDescendantsChatsCategoriesChatCategoryIdDescendantsGetResponse } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Scenarios
 * Get all scenarios.
 *
 * Returns:
 * A list of all scenarios
 */
export const getScenariosScenariosGet = <ThrowOnError extends boolean = false>(options?: Options<GetScenariosScenariosGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScenariosScenariosGetResponse, GetScenariosScenariosGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetScenariosScenariosGetResponse.parseAsync(data);
        },
        url: '/scenarios/',
        ...options
    });
};

/**
 * Create Scenario
 * Create a new scenario.
 *
 * Args:
 * scenario_data: The scenario data to create
 *
 * Returns:
 * The created scenario
 *
 * Raises:
 * HTTPException: If the scenario creation fails
 */
export const createScenarioScenariosPost = <ThrowOnError extends boolean = false>(options: Options<CreateScenarioScenariosPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateScenarioScenariosPostResponse, CreateScenarioScenariosPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateScenarioScenariosPostResponse.parseAsync(data);
        },
        url: '/scenarios/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Scenario
 * Get a scenario by ID.
 *
 * Args:
 * scenario_id: The ID of the scenario to retrieve
 *
 * Returns:
 * The scenario if found
 *
 * Raises:
 * HTTPException: If the scenario is not found
 */
export const getScenarioScenariosScenarioIdGet = <ThrowOnError extends boolean = false>(options: Options<GetScenarioScenariosScenarioIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScenarioScenariosScenarioIdGetResponse, GetScenarioScenariosScenarioIdGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetScenarioScenariosScenarioIdGetResponse.parseAsync(data);
        },
        url: '/scenarios/{scenario_id}',
        ...options
    });
};

/**
 * Update Scenario
 * Update a scenario.
 *
 * Args:
 * scenario_id: The ID of the scenario to update
 * scenario_data: The new scenario data
 *
 * Returns:
 * The updated scenario
 *
 * Raises:
 * HTTPException: If the scenario is not found or update fails
 */
export const updateScenarioScenariosScenarioIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateScenarioScenariosScenarioIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateScenarioScenariosScenarioIdPutResponse, UpdateScenarioScenariosScenarioIdPutError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zUpdateScenarioScenariosScenarioIdPutResponse.parseAsync(data);
        },
        url: '/scenarios/{scenario_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Scenario Childrens
 * Get the children of a scenario.
 */
export const getScenarioChildrensScenariosScenarioIdChildrensGet = <ThrowOnError extends boolean = false>(options: Options<GetScenarioChildrensScenariosScenarioIdChildrensGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetScenarioChildrensScenariosScenarioIdChildrensGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/scenarios/{scenario_id}/childrens',
        ...options
    });
};

/**
 * Get Scenario Parents
 * Get the parent of a scenario.
 */
export const getScenarioParentsScenariosScenarioIdParentGet = <ThrowOnError extends boolean = false>(options: Options<GetScenarioParentsScenariosScenarioIdParentGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetScenarioParentsScenariosScenarioIdParentGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/scenarios/{scenario_id}/parent',
        ...options
    });
};

/**
 * Cancel Scenario
 * Cancel a scenario.
 */
export const cancelScenarioScenariosScenarioIdCancelPost = <ThrowOnError extends boolean = false>(options: Options<CancelScenarioScenariosScenarioIdCancelPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelScenarioScenariosScenarioIdCancelPostResponse, CancelScenarioScenariosScenarioIdCancelPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCancelScenarioScenariosScenarioIdCancelPostResponse.parseAsync(data);
        },
        url: '/scenarios/{scenario_id}/cancel',
        ...options
    });
};

/**
 * Rerun Scenario
 * Rerun a scenario.
 */
export const rerunScenarioScenariosScenarioIdRerunGet = <ThrowOnError extends boolean = false>(options: Options<RerunScenarioScenariosScenarioIdRerunGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RerunScenarioScenariosScenarioIdRerunGetResponse, RerunScenarioScenariosScenarioIdRerunGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zRerunScenarioScenariosScenarioIdRerunGetResponse.parseAsync(data);
        },
        url: '/scenarios/{scenario_id}/rerun',
        ...options
    });
};

/**
 * Get Action
 * Get an action by ID.
 */
export const getActionActionsActionIdGet = <ThrowOnError extends boolean = false>(options: Options<GetActionActionsActionIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActionActionsActionIdGetResponse, GetActionActionsActionIdGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetActionActionsActionIdGetResponse.parseAsync(data);
        },
        url: '/actions/{action_id}',
        ...options
    });
};

/**
 * Update Action Status
 * Update the status of an action.
 */
export const updateActionStatusActionsActionIdStatusPut = <ThrowOnError extends boolean = false>(options: Options<UpdateActionStatusActionsActionIdStatusPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateActionStatusActionsActionIdStatusPutResponse, UpdateActionStatusActionsActionIdStatusPutError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zUpdateActionStatusActionsActionIdStatusPutResponse.parseAsync(data);
        },
        url: '/actions/{action_id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Events To Process
 * Get events that are older than the current utc timestamp.
 *
 * Args:
 * session: Database session
 *
 * Returns:
 * List of upcoming events
 */
export const getEventsToProcessScheduledEventsGet = <ThrowOnError extends boolean = false>(options?: Options<GetEventsToProcessScheduledEventsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEventsToProcessScheduledEventsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetEventsToProcessScheduledEventsGetResponse.parseAsync(data);
        },
        url: '/scheduled-events/',
        ...options
    });
};

/**
 * Create Scheduled Event
 * Create a new scheduled event.
 *
 * Args:
 * event_data: The event data to create
 * session: Database session
 *
 * Returns:
 * The created event
 *
 * Raises:
 * HTTPException: If the character doesn't exist or trigger time is invalid
 */
export const createScheduledEventScheduledEventsPost = <ThrowOnError extends boolean = false>(options: Options<CreateScheduledEventScheduledEventsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateScheduledEventScheduledEventsPostResponse, CreateScheduledEventScheduledEventsPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateScheduledEventScheduledEventsPostResponse.parseAsync(data);
        },
        url: '/scheduled-events/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Scheduled Event
 * Get a scheduled event by ID.
 *
 * Args:
 * event_id: The ID of the event to retrieve
 * session: Database session
 *
 * Returns:
 * The event if found
 *
 * Raises:
 * HTTPException: If the event is not found
 */
export const getScheduledEventScheduledEventsEventIdGet = <ThrowOnError extends boolean = false>(options: Options<GetScheduledEventScheduledEventsEventIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScheduledEventScheduledEventsEventIdGetResponse, GetScheduledEventScheduledEventsEventIdGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetScheduledEventScheduledEventsEventIdGetResponse.parseAsync(data);
        },
        url: '/scheduled-events/{event_id}',
        ...options
    });
};

/**
 * Get All Characters
 * Get all characters.
 */
export const getAllCharactersCharactersGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllCharactersCharactersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllCharactersCharactersGetResponse, GetAllCharactersCharactersGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetAllCharactersCharactersGetResponse.parseAsync(data);
        },
        url: '/characters/',
        ...options
    });
};

/**
 * Create Character
 * Create a new character.
 */
export const createCharacterCharactersPost = <ThrowOnError extends boolean = false>(options: Options<CreateCharacterCharactersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCharacterCharactersPostResponse, CreateCharacterCharactersPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateCharacterCharactersPostResponse.parseAsync(data);
        },
        url: '/characters/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Character
 * Delete a character.
 */
export const deleteCharacterCharactersCharacterIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCharacterCharactersCharacterIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteCharacterCharactersCharacterIdDeleteError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/characters/{character_id}',
        ...options
    });
};

/**
 * Get Character
 * Get a character by ID.
 */
export const getCharacterCharactersCharacterIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCharacterCharactersCharacterIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCharacterCharactersCharacterIdGetResponse, GetCharacterCharactersCharacterIdGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetCharacterCharactersCharacterIdGetResponse.parseAsync(data);
        },
        url: '/characters/{character_id}',
        ...options
    });
};

/**
 * Update Character
 * Update a character.
 */
export const updateCharacterCharactersCharacterIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateCharacterCharactersCharacterIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCharacterCharactersCharacterIdPutResponse, UpdateCharacterCharactersCharacterIdPutError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zUpdateCharacterCharactersCharacterIdPutResponse.parseAsync(data);
        },
        url: '/characters/{character_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Character By Name
 * Get a character by name.
 */
export const getCharacterByNameCharactersNameNameGet = <ThrowOnError extends boolean = false>(options: Options<GetCharacterByNameCharactersNameNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCharacterByNameCharactersNameNameGetResponse, GetCharacterByNameCharactersNameNameGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetCharacterByNameCharactersNameNameGetResponse.parseAsync(data);
        },
        url: '/characters/name/{name}',
        ...options
    });
};

/**
 * Get Bot Characters
 * Get all bot characters.
 */
export const getBotCharactersCharactersBotsGet = <ThrowOnError extends boolean = false>(options?: Options<GetBotCharactersCharactersBotsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBotCharactersCharactersBotsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetBotCharactersCharactersBotsGetResponse.parseAsync(data);
        },
        url: '/characters/bots/',
        ...options
    });
};

/**
 * Get Human Characters
 * Get all human characters.
 */
export const getHumanCharactersCharactersHumansGet = <ThrowOnError extends boolean = false>(options?: Options<GetHumanCharactersCharactersHumansGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHumanCharactersCharactersHumansGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetHumanCharactersCharactersHumansGetResponse.parseAsync(data);
        },
        url: '/characters/humans/',
        ...options
    });
};

/**
 * Get Character Chats
 * Get all chats that a character belongs to.
 */
export const getCharacterChatsCharactersCharacterIdChatsGet = <ThrowOnError extends boolean = false>(options: Options<GetCharacterChatsCharactersCharacterIdChatsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCharacterChatsCharactersCharacterIdChatsGetResponse, GetCharacterChatsCharactersCharacterIdChatsGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetCharacterChatsCharactersCharacterIdChatsGetResponse.parseAsync(data);
        },
        url: '/characters/{character_id}/chats',
        ...options
    });
};

/**
 * Add Character To Chat
 * Add a character to a chat.
 */
export const addCharacterToChatCharactersCharacterIdChatsChatIdPost = <ThrowOnError extends boolean = false>(options: Options<AddCharacterToChatCharactersCharacterIdChatsChatIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AddCharacterToChatCharactersCharacterIdChatsChatIdPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/characters/{character_id}/chats/{chat_id}',
        ...options
    });
};

/**
 * Get Slots Count
 * Get the statistics of the slots.
 */
export const getSlotsCountCharactersSlotsCountGet = <ThrowOnError extends boolean = false>(options?: Options<GetSlotsCountCharactersSlotsCountGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSlotsCountCharactersSlotsCountGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetSlotsCountCharactersSlotsCountGetResponse.parseAsync(data);
        },
        url: '/characters/slots_count/',
        ...options
    });
};

/**
 * Get Origins
 * Get the origins.
 */
export const getOriginsCharactersOriginsGet = <ThrowOnError extends boolean = false>(options?: Options<GetOriginsCharactersOriginsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOriginsCharactersOriginsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetOriginsCharactersOriginsGetResponse.parseAsync(data);
        },
        url: '/characters/origins/',
        ...options
    });
};

/**
 * Get Origins
 * Get the origins.
 */
export const getOriginsCharactersOriginsOriginCharactersGet = <ThrowOnError extends boolean = false>(options: Options<GetOriginsCharactersOriginsOriginCharactersGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOriginsCharactersOriginsOriginCharactersGetResponse, GetOriginsCharactersOriginsOriginCharactersGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetOriginsCharactersOriginsOriginCharactersGetResponse.parseAsync(data);
        },
        url: '/characters/origins/{origin}/characters/',
        ...options
    });
};

/**
 * Get All Chats
 * Get all chats.
 */
export const getAllChatsChatsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllChatsChatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllChatsChatsGetResponse, GetAllChatsChatsGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetAllChatsChatsGetResponse.parseAsync(data);
        },
        url: '/chats/',
        ...options
    });
};

/**
 * Create Chat
 * Create a new chat.
 */
export const createChatChatsPost = <ThrowOnError extends boolean = false>(options: Options<CreateChatChatsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateChatChatsPostResponse, CreateChatChatsPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateChatChatsPostResponse.parseAsync(data);
        },
        url: '/chats/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Chat
 * Delete a chat.
 */
export const deleteChatChatsChatIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteChatChatsChatIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteChatChatsChatIdDeleteError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chat_id}',
        ...options
    });
};

/**
 * Get Chat
 * Get a chat by ID.
 */
export const getChatChatsChatIdGet = <ThrowOnError extends boolean = false>(options: Options<GetChatChatsChatIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatChatsChatIdGetResponse, GetChatChatsChatIdGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetChatChatsChatIdGetResponse.parseAsync(data);
        },
        url: '/chats/{chat_id}',
        ...options
    });
};

/**
 * Update Chat
 * Update a chat.
 */
export const updateChatChatsChatIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateChatChatsChatIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateChatChatsChatIdPutResponse, UpdateChatChatsChatIdPutError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zUpdateChatChatsChatIdPutResponse.parseAsync(data);
        },
        url: '/chats/{chat_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Chat By Username
 * Get a chat by username.
 */
export const getChatByUsernameChatsUsernameUsernameGet = <ThrowOnError extends boolean = false>(options: Options<GetChatByUsernameChatsUsernameUsernameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatByUsernameChatsUsernameUsernameGetResponse, GetChatByUsernameChatsUsernameUsernameGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetChatByUsernameChatsUsernameUsernameGetResponse.parseAsync(data);
        },
        url: '/chats/username/{username}',
        ...options
    });
};

/**
 * Get Chat Characters
 * Get all characters of a chat.
 */
export const getChatCharactersChatsChatIdCharactersGet = <ThrowOnError extends boolean = false>(options: Options<GetChatCharactersChatsChatIdCharactersGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatCharactersChatsChatIdCharactersGetResponse, GetChatCharactersChatsChatIdCharactersGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetChatCharactersChatsChatIdCharactersGetResponse.parseAsync(data);
        },
        url: '/chats/{chat_id}/characters',
        ...options
    });
};

/**
 * Remove Character From Chat
 * Remove a character from a chat.
 */
export const removeCharacterFromChatChatsChatIdCharactersCharacterIdDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveCharacterFromChatChatsChatIdCharactersCharacterIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, RemoveCharacterFromChatChatsChatIdCharactersCharacterIdDeleteError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chat_id}/characters/{character_id}',
        ...options
    });
};

/**
 * Add Character To Chat
 * Add a character to a chat.
 */
export const addCharacterToChatChatsChatIdCharactersCharacterIdPost = <ThrowOnError extends boolean = false>(options: Options<AddCharacterToChatChatsChatIdCharactersCharacterIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AddCharacterToChatChatsChatIdCharactersCharacterIdPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/chats/{chat_id}/characters/{character_id}',
        ...options
    });
};

/**
 * Get Chats By Category Id
 * Get all chats in a category.
 *
 * Args:
 * chat_category_id: The ID of the category to get chats from
 * include_descendants: If True, also returns chats from all descendant categories
 */
export const getChatsByCategoryIdChatsChatCategoriesChatCategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<GetChatsByCategoryIdChatsChatCategoriesChatCategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatsByCategoryIdChatsChatCategoriesChatCategoryIdGetResponse, GetChatsByCategoryIdChatsChatCategoriesChatCategoryIdGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetChatsByCategoryIdChatsChatCategoriesChatCategoryIdGetResponse.parseAsync(data);
        },
        url: '/chats/chat_categories/{chat_category_id}',
        ...options
    });
};

/**
 * Get Categories
 * Get all categories.
 */
export const getCategoriesChatsCategoriesGet = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesChatsCategoriesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoriesChatsCategoriesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetCategoriesChatsCategoriesGetResponse.parseAsync(data);
        },
        url: '/chats/categories/',
        ...options
    });
};

/**
 * Get Chats By Category
 * Get all chats by category.
 */
export const getChatsByCategoryChatsCategoriesCategoryChatsGet = <ThrowOnError extends boolean = false>(options: Options<GetChatsByCategoryChatsCategoriesCategoryChatsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatsByCategoryChatsCategoriesCategoryChatsGetResponse, GetChatsByCategoryChatsCategoriesCategoryChatsGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetChatsByCategoryChatsCategoriesCategoryChatsGetResponse.parseAsync(data);
        },
        url: '/chats/categories/{category}/chats/',
        ...options
    });
};

/**
 * Submit Scenario Scenario Post
 * Submit Scenario
 */
export const submitScenarioScenarioPostOperatorScenarioPost = <ThrowOnError extends boolean = false>(options: Options<SubmitScenarioScenarioPostOperatorScenarioPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmitScenarioScenarioPostOperatorScenarioPostResponse, SubmitScenarioScenarioPostOperatorScenarioPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zSubmitScenarioScenarioPostOperatorScenarioPostResponse.parseAsync(data);
        },
        url: '/operator/scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Scenario Scenario  Scenario Id Get
 * Get Scenario
 */
export const getScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGet = <ThrowOnError extends boolean = false>(options: Options<GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetResponse, GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetResponse.parseAsync(data);
        },
        url: '/operator/scenario/{scenario_id}',
        ...options
    });
};

/**
 * Send Scenario Operator Mock Post With Slot
 * Send Scenario
 */
export const sendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPost = <ThrowOnError extends boolean = false>(options: Options<SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostResponse, SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zSendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostResponse.parseAsync(data);
        },
        url: '/operator_mock/{slot}/scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send Scenario Operator Mock Post Without Slot
 * Send Scenario
 */
export const sendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPost = <ThrowOnError extends boolean = false>(options: Options<SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostResponse, SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zSendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostResponse.parseAsync(data);
        },
        url: '/operator_mock/scenario',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Missions
 */
export const getMissionsMissionsGet = <ThrowOnError extends boolean = false>(options?: Options<GetMissionsMissionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMissionsMissionsGetResponse, GetMissionsMissionsGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetMissionsMissionsGetResponse.parseAsync(data);
        },
        url: '/missions/',
        ...options
    });
};

/**
 * Create Mission
 */
export const createMissionMissionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateMissionMissionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMissionMissionsPostResponse, CreateMissionMissionsPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateMissionMissionsPostResponse.parseAsync(data);
        },
        url: '/missions/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Missions By Type
 */
export const getMissionsByTypeMissionsTypeMissionTypeGet = <ThrowOnError extends boolean = false>(options: Options<GetMissionsByTypeMissionsTypeMissionTypeGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMissionsByTypeMissionsTypeMissionTypeGetResponse, GetMissionsByTypeMissionsTypeMissionTypeGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetMissionsByTypeMissionsTypeMissionTypeGetResponse.parseAsync(data);
        },
        url: '/missions/type/{mission_type}',
        ...options
    });
};

/**
 * Delete Mission
 */
export const deleteMissionMissionsMissionIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteMissionMissionsMissionIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteMissionMissionsMissionIdDeleteError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/missions/{mission_id}',
        ...options
    });
};

/**
 * Get Mission
 */
export const getMissionMissionsMissionIdGet = <ThrowOnError extends boolean = false>(options: Options<GetMissionMissionsMissionIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMissionMissionsMissionIdGetResponse, GetMissionMissionsMissionIdGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetMissionMissionsMissionIdGetResponse.parseAsync(data);
        },
        url: '/missions/{mission_id}',
        ...options
    });
};

/**
 * Update Mission
 */
export const updateMissionMissionsMissionIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateMissionMissionsMissionIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMissionMissionsMissionIdPutResponse, UpdateMissionMissionsMissionIdPutError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zUpdateMissionMissionsMissionIdPutResponse.parseAsync(data);
        },
        url: '/missions/{mission_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Run Mission
 */
export const runMissionMissionsRunMissionMissionIdPost = <ThrowOnError extends boolean = false>(options: Options<RunMissionMissionsRunMissionMissionIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RunMissionMissionsRunMissionMissionIdPostResponse, RunMissionMissionsRunMissionMissionIdPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zRunMissionMissionsRunMissionMissionIdPostResponse.parseAsync(data);
        },
        url: '/missions/run_mission/{mission_id}',
        ...options
    });
};

/**
 * Plan Mission
 */
export const planMissionMissionsPlanMissionMissionIdPost = <ThrowOnError extends boolean = false>(options: Options<PlanMissionMissionsPlanMissionMissionIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PlanMissionMissionsPlanMissionMissionIdPostResponse, PlanMissionMissionsPlanMissionMissionIdPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zPlanMissionMissionsPlanMissionMissionIdPostResponse.parseAsync(data);
        },
        url: '/missions/plan_mission/{mission_id}',
        ...options
    });
};

/**
 * Cancel Mission
 */
export const cancelMissionMissionsCancelMissionMissionIdPost = <ThrowOnError extends boolean = false>(options: Options<CancelMissionMissionsCancelMissionMissionIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelMissionMissionsCancelMissionMissionIdPostResponse, CancelMissionMissionsCancelMissionMissionIdPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCancelMissionMissionsCancelMissionMissionIdPostResponse.parseAsync(data);
        },
        url: '/missions/cancel_mission/{mission_id}',
        ...options
    });
};

/**
 * Create Mission2
 */
export const createMission2MissionsCreateMission2Post = <ThrowOnError extends boolean = false>(options: Options<CreateMission2MissionsCreateMission2PostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMission2MissionsCreateMission2PostResponse, CreateMission2MissionsCreateMission2PostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateMission2MissionsCreateMission2PostResponse.parseAsync(data);
        },
        url: '/missions/create_mission2/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Missions Statistics
 */
export const getMissionsStatisticsMissionsStatisticsGet = <ThrowOnError extends boolean = false>(options?: Options<GetMissionsStatisticsMissionsStatisticsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMissionsStatisticsMissionsStatisticsGetResponse, GetMissionsStatisticsMissionsStatisticsGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetMissionsStatisticsMissionsStatisticsGetResponse.parseAsync(data);
        },
        url: '/missions/statistics/',
        ...options
    });
};

/**
 * Get All Chat Categories
 * Get all chat categories.
 */
export const getAllChatCategoriesChatsCategoriesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllChatCategoriesChatsCategoriesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllChatCategoriesChatsCategoriesGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetAllChatCategoriesChatsCategoriesGetResponse.parseAsync(data);
        },
        url: '/chats_categories/',
        ...options
    });
};

/**
 * Create Chat Category
 * Create a new chat category.
 */
export const createChatCategoryChatsCategoriesPost = <ThrowOnError extends boolean = false>(options: Options<CreateChatCategoryChatsCategoriesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateChatCategoryChatsCategoriesPostResponse, CreateChatCategoryChatsCategoriesPostError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zCreateChatCategoryChatsCategoriesPostResponse.parseAsync(data);
        },
        url: '/chats_categories/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Chat Category
 * Delete a chat category.
 */
export const deleteChatCategoryChatsCategoriesChatCategoryIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteChatCategoryChatsCategoriesChatCategoryIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteChatCategoryChatsCategoriesChatCategoryIdDeleteError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        url: '/chats_categories/{chat_category_id}',
        ...options
    });
};

/**
 * Get Chat Category
 * Get a chat category by ID.
 */
export const getChatCategoryChatsCategoriesChatCategoryIdGet = <ThrowOnError extends boolean = false>(options: Options<GetChatCategoryChatsCategoriesChatCategoryIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatCategoryChatsCategoriesChatCategoryIdGetResponse, GetChatCategoryChatsCategoriesChatCategoryIdGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetChatCategoryChatsCategoriesChatCategoryIdGetResponse.parseAsync(data);
        },
        url: '/chats_categories/{chat_category_id}',
        ...options
    });
};

/**
 * Update Chat Category
 * Update a chat category.
 */
export const updateChatCategoryChatsCategoriesChatCategoryIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateChatCategoryChatsCategoriesChatCategoryIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateChatCategoryChatsCategoriesChatCategoryIdPutResponse, UpdateChatCategoryChatsCategoriesChatCategoryIdPutError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zUpdateChatCategoryChatsCategoriesChatCategoryIdPutResponse.parseAsync(data);
        },
        url: '/chats_categories/{chat_category_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Root Chat Category
 * Get the root chat category.
 */
export const getRootChatCategoryChatsCategoriesRootGet = <ThrowOnError extends boolean = false>(options?: Options<GetRootChatCategoryChatsCategoriesRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRootChatCategoryChatsCategoriesRootGetResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetRootChatCategoryChatsCategoriesRootGetResponse.parseAsync(data);
        },
        url: '/chats_categories/root/',
        ...options
    });
};

/**
 * Get Chat Category Childrens
 * Get the childrens of a chat category.
 */
export const getChatCategoryChildrensChatsCategoriesChatCategoryIdChildrensGet = <ThrowOnError extends boolean = false>(options: Options<GetChatCategoryChildrensChatsCategoriesChatCategoryIdChildrensGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatCategoryChildrensChatsCategoriesChatCategoryIdChildrensGetResponse, GetChatCategoryChildrensChatsCategoriesChatCategoryIdChildrensGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetChatCategoryChildrensChatsCategoriesChatCategoryIdChildrensGetResponse.parseAsync(data);
        },
        url: '/chats_categories/{chat_category_id}/childrens/',
        ...options
    });
};

/**
 * Get Chat Category Descendants
 * Get all the descendants of a chat category.
 */
export const getChatCategoryDescendantsChatsCategoriesChatCategoryIdDescendantsGet = <ThrowOnError extends boolean = false>(options: Options<GetChatCategoryDescendantsChatsCategoriesChatCategoryIdDescendantsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetChatCategoryDescendantsChatsCategoriesChatCategoryIdDescendantsGetResponse, GetChatCategoryDescendantsChatsCategoriesChatCategoryIdDescendantsGetError, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            }
        ],
        responseValidator: async (data) => {
            return await zGetChatCategoryDescendantsChatsCategoriesChatCategoryIdDescendantsGetResponse.parseAsync(data);
        },
        url: '/chats_categories/{chat_category_id}/descendants/',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health
 */
export const healthHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};