// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zModelsActionsActionStatus = z.enum([
    'scheduled',
    'in_process',
    'running',
    'success',
    'failed',
    'cancelled',
    'pending',
    'planned'
]);

export const zActionCreate = z.object({
    serial_number: z.number().int(),
    action_type: z.string(),
    status_code: z.union([
        zModelsActionsActionStatus,
        z.null()
    ]).optional(),
    payload: z.union([
        z.object({}),
        z.null()
    ]).optional()
});

export const zActionPrefrences = z.object({
    fail_fast: z.union([
        z.boolean(),
        z.null()
    ]).optional()
});

export const zActionRead = z.object({
    id: z.string().uuid(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    scenario_id: z.string().uuid(),
    payload: z.union([
        z.object({}),
        z.null()
    ]).optional(),
    action_type: z.string(),
    content: z.union([
        z.object({}),
        z.null()
    ]).optional(),
    status_code: zModelsActionsActionStatus.optional(),
    error: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zActionStatusCode = z.enum([
    'success',
    'failed',
    'cancelled'
]);

export const zModelsOperatorActivityActionsActionStatusActionStatus = z.object({
    status_code: zActionStatusCode,
    error: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zModelsOperatorCommonMessageInfoMessageInfo = z.object({
    timestamp: z.string(),
    peer_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    from_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    text_hash: z.union([
        z.string(),
        z.null()
    ]).optional(),
    message_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    viewer_id: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zSendMessageResponseContentInput = z.object({
    message_info: zModelsOperatorCommonMessageInfoMessageInfo
});

export const zReplyToMessageResponseContentInput = z.object({
    message_info: zModelsOperatorCommonMessageInfoMessageInfo
});

export const zLeaveGroupResponseContent = z.object({});

export const zChatType = z.enum([
    'User',
    'Group',
    'Channel',
    'Bot',
    'Unknown'
]);

export const zChannelInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: zChatType.optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    subscribers: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zGroupInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: zChatType.optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    members: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    online: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zJoinGroupResponseContentInput = z.object({
    chat_info: z.union([
        zChannelInfo,
        zGroupInfo,
        z.null()
    ]),
    discussion_group_chat_info: z.union([
        zChannelInfo,
        zGroupInfo,
        z.null()
    ])
});

export const zForwardMessageResponseContentInput = z.object({
    message_info: zModelsOperatorCommonMessageInfoMessageInfo
});

export const zBehaviouralResponseContentInput = z.object({
    current_context: z.union([
        z.unknown(),
        z.null()
    ]).optional(),
    chats: z.union([
        z.array(z.unknown()),
        z.null()
    ]).optional(),
    personal_details_synced: z.boolean().optional().default(false),
    auto_download_media_disabled: z.boolean().optional().default(false),
    all_active_sessions_deleted: z.boolean().optional().default(false)
});

export const zSendBulkMessagesResponseContentInput = z.object({
    message_infos: z.array(zModelsOperatorCommonMessageInfoMessageInfo)
});

export const zActionResponseInput = z.object({
    id: z.string().optional(),
    status: zModelsOperatorActivityActionsActionStatusActionStatus,
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]),
    content: z.union([
        zSendMessageResponseContentInput,
        zReplyToMessageResponseContentInput,
        zLeaveGroupResponseContent,
        zJoinGroupResponseContentInput,
        zForwardMessageResponseContentInput,
        zBehaviouralResponseContentInput,
        zSendBulkMessagesResponseContentInput,
        z.null()
    ]),
    start_time: z.string().datetime()
});

export const zMessageInfoOutput = z.object({
    timestamp: z.string(),
    peer_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    from_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    text_hash: z.union([
        z.string(),
        z.null()
    ]).optional(),
    message_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    viewer_id: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zSendMessageResponseContentOutput = z.object({
    message_info: zMessageInfoOutput
});

export const zReplyToMessageResponseContentOutput = z.object({
    message_info: zMessageInfoOutput
});

export const zJoinGroupResponseContentOutput = z.object({
    chat_info: z.union([
        zChannelInfo,
        zGroupInfo,
        z.null()
    ]),
    discussion_group_chat_info: z.union([
        zChannelInfo,
        zGroupInfo,
        z.null()
    ])
});

export const zForwardMessageResponseContentOutput = z.object({
    message_info: zMessageInfoOutput
});

export const zBehaviouralResponseContentOutput = z.object({
    current_context: z.union([
        z.unknown(),
        z.null()
    ]).optional(),
    chats: z.union([
        z.array(z.unknown()),
        z.null()
    ]).optional(),
    personal_details_synced: z.boolean().optional().default(false),
    auto_download_media_disabled: z.boolean().optional().default(false),
    all_active_sessions_deleted: z.boolean().optional().default(false)
});

export const zSendBulkMessagesResponseContentOutput = z.object({
    message_infos: z.array(zMessageInfoOutput)
});

export const zActionResponseOutput = z.object({
    id: z.string().optional(),
    status: zModelsOperatorActivityActionsActionStatusActionStatus,
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]),
    content: z.union([
        zSendMessageResponseContentOutput,
        zReplyToMessageResponseContentOutput,
        zLeaveGroupResponseContent,
        zJoinGroupResponseContentOutput,
        zForwardMessageResponseContentOutput,
        zBehaviouralResponseContentOutput,
        zSendBulkMessagesResponseContentOutput,
        z.null()
    ]),
    start_time: z.string().datetime()
});

export const zActionStatusUpdate = z.object({
    status_code: zModelsActionsActionStatus,
    content: z.union([
        z.object({}),
        z.null()
    ]).optional(),
    error: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zAddManyCharactersToCategoryRequest = z.object({
    character_ids: z.array(z.string().uuid()),
    remove_others: z.boolean().optional().default(false)
});

export const zAddManyChatsToCategoryRequest = z.object({
    chat_ids: z.array(z.string().uuid()),
    remove_others: z.boolean().optional().default(false)
});

export const zAllocateProfilesGroupsMissionInput = z.object({
    characters_categories: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    chat_categories: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    diversify_chats: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    start_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    end_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    planning_timeout: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    batch_size: z.number().int().optional().default(10),
    batch_interval: z.number().int().optional().default(15)
});

export const zAttachment = z.object({
    url: z.string(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    mime_type: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zBehaviouralArgs = z.object({
    wait_time: z.number().int().optional().default(0),
    sync_context: z.boolean().optional().default(false),
    get_chats: z.boolean().optional().default(false),
    sync_personal_details: z.boolean().optional().default(false),
    disable_auto_download_media: z.boolean().optional().default(false),
    delete_all_active_sessions: z.boolean().optional().default(false)
});

export const zBehaviouralAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zBehaviouralArgs
});

export const zBodyCreateChatsFromCsvChatsFromCsvPost = z.object({
    file: z.string()
});

export const zCategoryCreate = z.object({
    name: z.string().optional().default(''),
    description: z.string().optional().default(''),
    parent_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zCategoryNodePayload = z.object({
    id: z.string().uuid(),
    name: z.string(),
    description: z.string(),
    chats_count: z.union([
        z.number().int(),
        z.null()
    ]),
    characters_count: z.union([
        z.number().int(),
        z.null()
    ])
});

export const zCategoryRead = z.object({
    id: z.string().uuid(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    name: z.string().optional().default(''),
    description: z.string().optional().default(''),
    parent_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional(),
    character_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    chat_count: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zCharacter = z.object({
    id: z.string().optional()
});

export const zCharacterCreate = z.object({
    name: z.string(),
    is_bot: z.boolean().optional().default(false),
    origin: z.string().optional().default(''),
    slot: z.number().int().optional().default(0),
    is_active: z.boolean().optional().default(true),
    timezone: z.string().optional().default('UTC'),
    activity_type: z.number().int().optional().default(0),
    telegram_id: z.string().optional().default(''),
    id: z.string().uuid()
});

export const zCharacterRead = z.object({
    id: z.string().uuid(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    name: z.string(),
    is_bot: z.boolean().optional().default(false),
    origin: z.string().optional().default(''),
    slot: z.number().int().optional().default(0),
    is_active: z.boolean().optional().default(true),
    timezone: z.string().optional().default('UTC'),
    activity_type: z.number().int().optional().default(0),
    telegram_id: z.string().optional().default('')
});

export const zChatCreate = z.object({
    platform: z.union([
        z.string(),
        z.null()
    ]).optional(),
    chat_type: z.union([
        zChatType,
        z.null()
    ]).optional(),
    platform_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    username: z.union([
        z.string(),
        z.null()
    ]).optional(),
    invite_link: z.union([
        z.string(),
        z.null()
    ]).optional(),
    max_capacity: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    about: z.union([
        z.string(),
        z.null()
    ]).optional(),
    participants_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    messages_count_last_month: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    replies_count_last_month: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    forward_from_count_last_month: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    forward_to_count_last_month: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    average_reactions: z.union([
        z.number(),
        z.null()
    ]).optional(),
    linked_chat_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    linked_chat_username: z.union([
        z.string(),
        z.null()
    ]).optional(),
    slowmode_enabled: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    slowmode_seconds: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    noforwards: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    join_to_send: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    join_request: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    view_messages: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_messages: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_media: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_photos: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_videos: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    embed_links: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_polls: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_roundvideos: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_audios: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_voices: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_docs: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_plain: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    change_info: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    invite_users: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    pin_messages: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_stickers: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_gifs: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_games: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_inline: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    bots: z.union([
        z.array(z.object({})),
        z.null()
    ]).optional()
});

export const zChatInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: z.union([
        zChatType,
        z.null()
    ]).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zChatRead = z.object({
    id: z.string().uuid(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    platform: z.union([
        z.string(),
        z.null()
    ]).optional(),
    chat_type: z.union([
        zChatType,
        z.null()
    ]).optional(),
    platform_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    username: z.union([
        z.string(),
        z.null()
    ]).optional(),
    invite_link: z.union([
        z.string(),
        z.null()
    ]).optional(),
    max_capacity: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    about: z.union([
        z.string(),
        z.null()
    ]).optional(),
    participants_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    messages_count_last_month: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    replies_count_last_month: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    forward_from_count_last_month: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    forward_to_count_last_month: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    average_reactions: z.union([
        z.number(),
        z.null()
    ]).optional(),
    linked_chat_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    linked_chat_username: z.union([
        z.string(),
        z.null()
    ]).optional(),
    slowmode_enabled: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    slowmode_seconds: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    noforwards: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    join_to_send: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    join_request: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    view_messages: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_messages: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_media: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_photos: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_videos: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    embed_links: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_polls: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_roundvideos: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_audios: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_voices: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_docs: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_plain: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    change_info: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    invite_users: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    pin_messages: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_stickers: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_gifs: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_games: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    send_inline: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    bots: z.union([
        z.array(z.object({})),
        z.null()
    ]).optional(),
    categories: z.array(z.string()).optional().default([]),
    system_chat_members: z.array(z.string().uuid()).optional().default([])
});

export const zChatView = z.object({
    id: z.string().uuid(),
    platform_id: z.union([
        z.number().int(),
        z.null()
    ]),
    username: z.union([
        z.string(),
        z.null()
    ]),
    title: z.union([
        z.string(),
        z.null()
    ]),
    chat_type: z.union([
        zChatType,
        z.null()
    ]),
    linked_chat_username: z.union([
        z.string(),
        z.null()
    ]),
    categories: z.array(z.string()).optional().default([]),
    system_chat_members: z.array(z.string().uuid()).optional().default([])
});

export const zPrefrences = z.object({
    actions_timeout: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    action_interval: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    close_browser_when_finished: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    should_login_telegram: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    verify_proxy_working: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    fail_fast: z.union([
        z.boolean(),
        z.null()
    ]).optional()
});

export const zJoinGroupArgs = z.object({
    chat: z.union([
        zChatInfo,
        z.null()
    ]).optional(),
    join_discussion_group_if_availble: z.boolean().optional().default(false),
    invite_link: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zJoinGroupAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zJoinGroupArgs
});

export const zLeaveGroupArgs = z.object({
    chat: zChatInfo
});

export const zLeaveGroupAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zLeaveGroupArgs
});

export const zInputMessage = z.object({
    text: z.union([
        z.string(),
        z.null()
    ]).optional(),
    attachments: z.array(zAttachment).optional().default([])
});

export const zReplyToMessageArgs = z.object({
    chat: zChatInfo,
    message_info: z.union([
        zModelsOperatorCommonMessageInfoMessageInfo,
        z.string(),
        z.null()
    ]).optional(),
    input_message_content: zInputMessage
});

export const zReplyToMessageAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zReplyToMessageArgs
});

export const zSendMessageArgs = z.object({
    chat: zChatInfo,
    input_message_content: zInputMessage
});

export const zSendMessageAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zSendMessageArgs
});

export const zForwardMessageArgs = z.object({
    from_chat: zChatInfo,
    message_info: z.union([
        zModelsOperatorCommonMessageInfoMessageInfo,
        z.string(),
        z.null()
    ]).optional(),
    target_chat: zChatInfo,
    message: z.union([
        zInputMessage,
        z.null()
    ]).optional()
});

export const zForwardMessageAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zForwardMessageArgs
});

export const zSendBulkMessagesArgs = z.object({
    chat: zChatInfo,
    messages: z.array(z.string()),
    interval: z.number().optional().default(1)
});

export const zSendBulkMessagesAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zSendBulkMessagesArgs
});

export const zScenario = z.object({
    id: z.string().optional(),
    profile: zCharacter,
    prefrences: zPrefrences.optional(),
    actions: z.array(z.unknown())
});

export const zDependentScenario: z.AnyZodObject = z.object({
    scenario: zScenario,
    relative_seconds_delay: z.number().int().optional().default(0),
    dependent_scenarios: z.array(z.lazy(() => {
        return zDependentScenario;
    })).optional().default([])
});

export const zModelsPlannerMessageInfo = z.object({
    platform_chat_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    platform_chat_name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    timestamp: z.string(),
    peer_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    from_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    text_hash: z.union([
        z.string(),
        z.null()
    ]).optional(),
    message_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    viewer_id: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zMessageForwardRequest = z.object({
    message_content: z.union([
        zInputMessage,
        z.null()
    ]).optional(),
    message_info: z.union([
        zModelsPlannerMessageInfo,
        z.string(),
        z.null()
    ]).optional()
});

export const zEchoMissionInput = z.object({
    target_group_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional(),
    message: zMessageForwardRequest,
    characters_categories: z.array(z.string()).optional().default([]),
    chats_categories: z.array(z.string()).optional().default([]),
    trigger_time: z.string().datetime().optional().default('2025-07-06T21:13:34.442276Z'),
    max_retries: z.number().int().optional().default(2),
    keep_hype: z.boolean().optional().default(false),
    scenario_external_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zMessageMetadata = z.object({
    chat_id: z.string(),
    character_id: z.string(),
    relative_seconds: z.number().optional().default(0)
});

export const zMessage: z.AnyZodObject = z.object({
    message_content: zInputMessage,
    metadata: z.union([
        zMessageMetadata,
        z.null()
    ]).optional(),
    replies: z.array(z.lazy(() => {
        return zMessage;
    })).optional()
});

export const zFirstPuppetShowMessage: z.AnyZodObject = z.object({
    message: zMessage,
    start_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional()
});

export const zFluffMissionInput = z.object({
    character_ids: z.union([
        z.array(z.string().uuid()),
        z.null()
    ]).optional(),
    characters_categories: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    is_routine: z.boolean().optional().default(false),
    batch_size: z.number().int().optional().default(20),
    batch_interval: z.number().int().optional().default(10),
    get_chats: z.boolean().optional().default(false),
    sync_personal_details: z.boolean().optional().default(false),
    disable_auto_download_media: z.boolean().optional().default(false),
    delete_all_active_sessions: z.boolean().optional().default(false)
});

export const zOperatorValidationError = z.object({
    loc: z.array(z.unknown()),
    msg: z.string(),
    type: z.string()
});

export const zHttpOperatorValidationError = z.object({
    detail: z.union([
        z.array(zOperatorValidationError),
        z.null()
    ]).optional()
});

export const zValidationError = z.object({
    loc: z.array(z.unknown()),
    msg: z.string(),
    type: z.string()
});

export const zHttpValidationError = z.object({
    detail: z.array(zValidationError).optional()
});

export const zSeedScenario = z.object({
    scenario: zScenario,
    trigger_time: z.string().datetime().optional().default('2025-07-06T21:13:34.346570Z'),
    dependent_scenarios: z.array(zDependentScenario).optional().default([])
});

export const zManualMissionInput = z.object({
    scenarios: z.array(zSeedScenario)
});

export const zMissionStatus = z.enum([
    'submitted',
    'planning',
    'failed_planning',
    'running',
    'completed',
    'canceled',
    'planned'
]);

export const zMissionCreate = z.object({
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    payload: z.object({}),
    mission_type: z.string(),
    status_code: z.union([
        zMissionStatus,
        z.null()
    ]).optional(),
    run_result: z.union([
        z.object({}),
        z.null()
    ]).optional()
});

export const zMissionExposure = z.object({
    potential_exposure: z.number().int(),
    potential_exposure_groups: z.number().int(),
    potential_exposure_min_start: z.union([
        z.string(),
        z.null()
    ]).optional(),
    potential_exposure_max_end: z.union([
        z.string(),
        z.null()
    ]).optional(),
    actual_exposure: z.number().int(),
    actual_exposure_groups: z.number().int(),
    actual_exposure_min_start: z.union([
        z.string(),
        z.null()
    ]).optional(),
    actual_exposure_max_end: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zModelsScenariosScenarioStatus = z.enum([
    'scheduled',
    'pending',
    'running',
    'success',
    'failed',
    'cancelled',
    'in_process',
    'planned'
]);

export const zScenarioRead = z.object({
    id: z.string().uuid(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    description: z.string(),
    trigger_time: z.string().datetime(),
    status_code: zModelsScenariosScenarioStatus.optional(),
    start_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    end_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    error: z.union([
        z.string(),
        z.null()
    ]).optional(),
    scenario_parent_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional(),
    external_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional(),
    character_id: z.string().uuid(),
    expiration_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    retries: z.number().int().optional().default(0),
    max_retries: z.number().int().optional().default(0),
    actions: z.array(zActionRead).optional(),
    mission_id: z.string().uuid()
});

export const zMissionRead = z.object({
    id: z.string().uuid(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    payload: z.object({}),
    mission_type: z.string(),
    status_code: z.union([
        zMissionStatus,
        z.null()
    ]).optional(),
    run_result: z.union([
        z.object({}),
        z.null()
    ]).optional(),
    scenarios: z.array(zScenarioRead).optional(),
    scenarios_count: z.number().int().optional().default(0)
});

export const zMissionStatistics = z.object({
    mission_type: z.union([
        z.string(),
        z.null()
    ]).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    created_at: z.union([
        z.string(),
        z.null()
    ]).optional(),
    status_code: zMissionStatus,
    cnt: z.number().int(),
    planned: z.number().int(),
    scheduled: z.number().int(),
    pending: z.number().int(),
    in_process: z.number().int(),
    running: z.number().int(),
    success: z.number().int(),
    failed: z.number().int(),
    cancelled: z.number().int()
});

export const zMissionRunResult = z.object({
    mission_exposure: z.union([
        zMissionExposure,
        z.null()
    ]).optional(),
    mission_statistics: z.union([
        zMissionStatistics,
        z.null()
    ]).optional()
});

export const zPuppetShowInput = z.object({
    first_messages: z.array(zFirstPuppetShowMessage),
    max_retries: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zRandomDistributionMissionInput = z.object({
    characters_categories: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    chat_categories: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    messages: z.array(zInputMessage),
    messages_amount: z.number().int().optional().default(1000),
    messages_amount_per_character: z.number().int().optional().default(5),
    max_messages_per_chat: z.number().int().optional().default(1),
    batch_size: z.number().int().optional().default(10),
    batch_interval: z.number().int().optional().default(5),
    start_time: z.string().datetime().optional().default('2025-07-06T21:13:34.445371Z'),
    max_retries: z.number().int().optional().default(2),
    random_choice: z.boolean().optional().default(false)
});

export const zScenarioCreate = z.object({
    description: z.string(),
    trigger_time: z.string().datetime(),
    actions: z.array(zActionCreate).optional(),
    external_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional(),
    scenario_parent_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional(),
    character_id: z.string().uuid(),
    mission_id: z.string().uuid(),
    expiration_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    max_retries: z.number().int().optional().default(0)
});

export const zScenarioInfo = z.object({
    start_time: z.string().datetime(),
    end_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional()
});

export const zScenarioResultStatus = z.enum([
    'success',
    'failed',
    'pending',
    'finished'
]);

export const zModelsOperatorActivityScenarioScenarioStatus = z.object({
    status_code: zScenarioResultStatus,
    error: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zScenarioResultInput = z.object({
    id: z.string().optional(),
    status: zModelsOperatorActivityScenarioScenarioStatus,
    scenario_info: zScenarioInfo,
    actions_responses: z.array(zActionResponseInput)
});

export const zScenarioResultOutput = z.object({
    id: z.string().optional(),
    status: zModelsOperatorActivityScenarioScenarioStatus,
    scenario_info: zScenarioInfo,
    actions_responses: z.array(zActionResponseOutput)
});

export const zScenarioUpdate = z.object({
    status_code: zModelsScenariosScenarioStatus.optional(),
    start_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    end_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    error: z.union([
        z.string(),
        z.null()
    ]).optional(),
    retries: z.number().int().optional().default(0)
});

export const zTreeNodeCategoryNodePayload: z.AnyZodObject = z.object({
    payload: zCategoryNodePayload,
    children: z.union([
        z.array(z.lazy(() => {
            return zTreeNodeCategoryNodePayload;
        })),
        z.null()
    ])
});

export const zGetScenariosScenariosGetResponse = z.array(zScenarioRead);

export const zCreateScenarioScenariosPostResponse = zScenarioRead;

export const zGetScenarioScenariosScenarioIdGetResponse = zScenarioRead;

export const zUpdateScenarioScenariosScenarioIdPutResponse = zScenarioRead;

export const zCancelScenarioScenariosScenarioIdCancelPostResponse = z.boolean();

export const zRerunScenarioScenariosScenarioIdRerunGetResponse = z.boolean();

export const zRescheduledScenariosScenariosRescheduledScenariosPostResponse = z.array(zScenarioRead);

export const zGetActionActionsActionIdGetResponse = zActionRead;

export const zUpdateActionStatusActionsActionIdStatusPutResponse = zActionRead;

export const zGetAllCharactersCharactersGetResponse = z.array(zCharacterRead);

export const zCreateCharacterCharactersPostResponse = zCharacterRead;

export const zGetCharacterCharactersCharacterIdGetResponse = zCharacterRead;

export const zGetCharacterByNameCharactersNameNameGetResponse = zCharacterRead;

export const zGetBotCharactersCharactersBotsGetResponse = z.array(zCharacterRead);

export const zGetHumanCharactersCharactersHumansGetResponse = z.array(zCharacterRead);

export const zGetCharacterChatsCharactersCharacterIdChatsGetResponse = z.union([
    z.array(zChatRead),
    z.null()
]);

export const zGetSlotsCountCharactersSlotsCountGetResponse = z.object({});

export const zGetCharacterCategoriesCharactersCharacterIdCategoriesGetResponse = z.array(zCategoryRead);

export const zGetCharactersStatesCharactersStatisticsGetResponse = z.array(z.object({}));

export const zGetCharactersStatesByDateCharactersStatisticsByDateGetResponse = z.array(z.object({}));

export const zCreateChatFromUsernameOrPlatformIdChatsFromUsernameOrPlatformIdPostResponse = zChatRead;

export const zGetAllChatsChatsGetResponse = z.array(zChatRead);

export const zCreateChatChatsPostResponse = zChatRead;

export const zCreateChatsFromCsvChatsFromCsvPostResponse = z.boolean();

export const zGetChatChatsChatIdGetResponse = zChatRead;

export const zUpdateChatChatsChatIdPutResponse = zChatRead;

export const zGetChatByUsernameChatsUsernameUsernameGetResponse = z.array(zChatRead);

export const zGetChatByPlatformIdChatsPlatformIdPlatformIdGetResponse = zChatRead;

export const zGetChatsViewChatsViewChatsGetResponse = z.array(zChatView);

export const zGetAllWriteableGroupsChatsCanSendMessageChatsGetResponse = z.array(zChatRead);

export const zGetChatCharactersChatsChatIdCharactersGetResponse = z.array(zCharacterRead);

export const zGetChatCategoriesChatsChatIdCategoriesGetResponse = z.array(zCategoryRead);

export const zSubmitScenarioScenarioPostOperatorScenarioPostResponse = z.object({});

export const zGetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetResponse = zScenarioResultOutput;

export const zSendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostResponse = z.object({});

export const zSendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostResponse = z.object({});

export const zGetMissionsMissionsGetResponse = z.array(zMissionRead);

export const zCreateMissionMissionsPostResponse = zMissionRead;

export const zGetMissionsByTypeMissionsTypeMissionTypeGetResponse = z.array(zMissionRead);

export const zGetMissionMissionsMissionIdGetResponse = zMissionRead;

export const zUpdateMissionMissionsMissionIdPutResponse = zMissionRead;

export const zPlanMissionMissionsPlanMissionMissionIdPostResponse = z.array(zScenarioRead);

export const zRunMissionMissionsRunMissionMissionIdPostResponse = z.array(zScenarioRead);

export const zCancelMissionMissionsCancelMissionMissionIdPostResponse = zMissionRead;

export const zCreateMission2MissionsCreateMission2PostResponse = z.boolean();

export const zGetMissionsStatisticsMissionsStatisticsGetResponse = z.array(z.object({}));

export const zGetMissionPotentialExposureMissionsExposureMissionIdGetResponse = zMissionExposure;

export const zGetFluffMissionByCharacterIdMissionsFluffMissionCharacterIdGetResponse = zMissionRead;

export const zGetMissionRunResultMissionsRunResultMissionIdGetResponse = zMissionRunResult;

export const zGetAllCategoriesCategoriesGetResponse = z.array(zCategoryRead);

export const zCreateCategoryCategoriesPostResponse = zCategoryRead;

export const zGetCategoryCategoriesCategoryIdGetResponse = zCategoryRead;

export const zUpdateCategoryCategoriesCategoryIdPutResponse = zCategoryRead;

export const zGetRootCategoryCategoriesRootGetResponse = zCategoryRead;

export const zGetCategoryChildrensCategoriesCategoryIdChildrensGetResponse = z.array(zCategoryRead);

export const zGetCategoryDescendantsCategoriesCategoryIdDescendantsGetResponse = z.array(zCategoryRead);

export const zGetCategoryCharactersCategoriesCategoryIdCharactersGetResponse = z.array(zCharacterRead);

export const zGetCategoryChatsCategoriesCategoryIdChatsGetResponse = z.array(zChatRead);

export const zGetCategoriesTreeCategoriesTreeGetResponse = zTreeNodeCategoryNodePayload;