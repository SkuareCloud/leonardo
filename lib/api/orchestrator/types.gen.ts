// This file is auto-generated by @hey-api/openapi-ts

export type ActionCreate = {
    serial_number: number;
    action_type: string;
    status_code?: AppModelsActionsActionStatus | null;
    payload?: {
        [key: string]: unknown;
    } | null;
};

export type ActionPrefrences = {
    fail_fast?: boolean | null;
};

export type ActionRead = {
    id: string;
    created_at: string;
    updated_at: string;
    scenario_id: string;
    payload?: {
        [key: string]: unknown;
    } | null;
    action_type: string;
    content?: {
        [key: string]: unknown;
    } | null;
};

export type ActionResponseInput = {
    id?: string;
    status: AppModelsOperatorActivityActionsActionStatusActionStatus;
    type: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural';
    content: SendMessageResponseContentInput | ReplyToMessageResponseContentInput | LeaveGroupResponseContent | JoinGroupResponseContentInput | ForwardMessageResponseContentInput | BehaviouralResponseContent | SendBulkMessagesResponseContentInput | null;
    start_time: string;
};

export type ActionResponseOutput = {
    id?: string;
    status: ActionStatusOutput;
    type: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural';
    content: SendMessageResponseContentOutput | ReplyToMessageResponseContentOutput | LeaveGroupResponseContent | JoinGroupResponseContentOutput | ForwardMessageResponseContentOutput | BehaviouralResponseContent | SendBulkMessagesResponseContentOutput | null;
    start_time: string;
};

export type ActionStatusOutput = {
    status_code: ActionStatusCode;
    error?: string | null;
};

export type ActionStatusCode = 'success' | 'failed' | 'cancelled';

export type ActionStatusUpdate = {
    status_code: AppModelsActionsActionStatus;
    content?: {
        [key: string]: unknown;
    } | null;
    error?: string | null;
};

export type AllocateProfilesGroupsMissionInput = {
    origin_ids?: Array<string> | null;
    chat_categories?: Array<string> | null;
    diversify_chats?: boolean | null;
    start_time: string;
    /**
     * Stop planning after this amount of seconds
     */
    planning_timeout?: number | null;
};

export type Attachment = {
    url: string;
    name?: string | null;
    mime_type?: string | null;
};

export type BehaviouralAction = {
    id?: string;
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural';
    prefrences?: ActionPrefrences;
    args: BehaviouralArgs;
};

export type BehaviouralArgs = {
    wait_time?: number | null;
    sync_context?: boolean;
    get_chats?: boolean;
};

export type BehaviouralResponseContent = {
    current_context?: unknown | null;
    chats?: Array<DialogValue> | null;
};

export type CategoryCreate = {
    name?: string;
    description?: string;
    parent_id?: string | null;
};

export type CategoryRead = {
    id: string;
    created_at: string;
    updated_at: string;
    name?: string;
    description?: string;
    parent_id?: string | null;
};

export type ChannelInfo = {
    id?: number | null;
    name?: string | null;
    title?: string | null;
    type?: ChatType;
    description?: string | null;
    subscribers?: number | null;
};

export type Character = {
    id?: string;
};

export type CharacterCreate = {
    name: string;
    is_bot?: boolean;
    origin?: string;
    slot?: number;
    is_active?: boolean;
    timezone?: string;
    activity_type?: number;
    telegram_id?: string;
    id: string;
};

export type CharacterRead = {
    id: string;
    created_at: string;
    updated_at: string;
    name: string;
    is_bot?: boolean;
    origin?: string;
    slot?: number;
    is_active?: boolean;
    timezone?: string;
    activity_type?: number;
    telegram_id?: string;
};

export type ChatCreate = {
    /**
     * Platform where the chat exists
     */
    platform?: string | null;
    /**
     * Type of the chat
     */
    chat_type?: ChatType | null;
    /**
     * Unique identifier for the chat on the platform
     */
    platform_id?: number | null;
    /**
     * Name of the chat or channel
     */
    username?: string | null;
    /**
     * Invite link for the chat
     */
    invite_link?: string | null;
    /**
     * Title of the chat
     */
    title?: string | null;
    /**
     * Detailed information about the chat
     */
    about?: string | null;
    /**
     * Category of the chat
     */
    category?: string | null;
    /**
     * Total number of participants in the chat
     */
    platform_participants_count?: number;
    /**
     * Number of active participants in the chat
     */
    active_participants_count?: number | null;
    /**
     * Count of messages in the latest month
     */
    messages_count_last_month?: number | null;
    /**
     * Count of replies in the latest month
     */
    replies_count_last_month?: number | null;
    /**
     * Count the number of appearences in other groups
     */
    forwards_count_last_month?: number | null;
    /**
     * Median number of views per message
     */
    median_views?: number | null;
    /**
     * Average number of reactions per message
     */
    average_reactions?: number | null;
    /**
     * sum of each forwarder's chats participants with overlap
     */
    exposure?: number | null;
    max_capacity?: number | null;
    /**
     * Category of the chat
     */
    category_id?: string | null;
    /**
     * Whether the chat can view participants
     */
    can_view_participants?: boolean | null;
    /**
     * Whether the chat is antispam
     */
    antispam?: boolean | null;
    /**
     * Number of participants in the chat
     */
    participants_count?: number | null;
    /**
     * Linked chat id
     */
    linked_chat_id?: number | null;
    /**
     * Slowmode in seconds
     */
    slowmode_seconds?: number | null;
    /**
     * Whether the chat is a bot
     */
    bot_verification?: boolean | null;
    /**
     * Whether the chat has slowmode enabled
     */
    chats_slowmode_enabled?: boolean | null;
    /**
     * Whether the chat has no forwards enabled
     */
    chats_noforwards?: boolean | null;
    /**
     * Whether the chat has join to send enabled
     */
    chats_join_to_send?: boolean | null;
    /**
     * Whether the chat has join request enabled
     */
    chats_join_request?: boolean | null;
    /**
     * Whether the chat can view messages
     */
    view_messages?: boolean | null;
    /**
     * Whether the chat can send messages
     */
    send_messages?: boolean | null;
    /**
     * Whether the chat can send media
     */
    send_media?: boolean | null;
    /**
     * Whether the chat can send stickers
     */
    send_stickers?: boolean | null;
    /**
     * Whether the chat can send gifs
     */
    send_gifs?: boolean | null;
    /**
     * Whether the chat can send games
     */
    send_games?: boolean | null;
    /**
     * Whether the chat can send inline
     */
    send_inline?: boolean | null;
    /**
     * Whether the chat can embed links
     */
    embed_links?: boolean | null;
    /**
     * Whether the chat can send polls
     */
    send_polls?: boolean | null;
    /**
     * Whether the chat can change info
     */
    change_info?: boolean | null;
    /**
     * Whether the chat can invite users
     */
    invite_users?: boolean | null;
    /**
     * Whether the chat can pin messages
     */
    pin_messages?: boolean | null;
    /**
     * Whether the chat can manage topics
     */
    manage_topics?: boolean | null;
    /**
     * Whether the chat can send photos
     */
    send_photos?: boolean | null;
    /**
     * Whether the chat can send videos
     */
    send_videos?: boolean | null;
    /**
     * Whether the chat can send round videos
     */
    send_roundvideos?: boolean | null;
    /**
     * Whether the chat can send audios
     */
    send_audios?: boolean | null;
    /**
     * Whether the chat can send voices
     */
    send_voices?: boolean | null;
    /**
     * Whether the chat can send docs
     */
    send_docs?: boolean | null;
    /**
     * Whether the chat can send plain
     */
    send_plain?: boolean | null;
    /**
     * Whether the chat can broadcast
     */
    chats_broadcast?: boolean | null;
    /**
     * Number of messages in the latest month
     */
    analysis_message_count_last_month?: number | null;
    /**
     * Number of active participants in the chat
     */
    analysis_active_participants?: number | null;
    /**
     * Number of times the chat was forwarded
     */
    analysis_num_of_times_forwarded?: number | null;
    /**
     * Number of channels forwarding the chat
     */
    analysis_num_of_channels_forwarding?: number | null;
    /**
     * Number of times the chat was forwarded
     */
    analysis_num_of_times_forwards?: number | null;
    /**
     * Number of channels forwarding the chat
     */
    analysis_num_of_channels_forwards?: number | null;
};

export type ChatInfo = {
    id?: number | null;
    name?: string | null;
    title?: string | null;
    type?: ChatType | null;
    description?: string | null;
};

export type ChatRead = {
    id: string;
    created_at: string;
    updated_at: string;
    /**
     * Platform where the chat exists
     */
    platform?: string | null;
    /**
     * Type of the chat
     */
    chat_type?: ChatType | null;
    /**
     * Unique identifier for the chat on the platform
     */
    platform_id?: number | null;
    /**
     * Name of the chat or channel
     */
    username?: string | null;
    /**
     * Invite link for the chat
     */
    invite_link?: string | null;
    /**
     * Title of the chat
     */
    title?: string | null;
    /**
     * Detailed information about the chat
     */
    about?: string | null;
    /**
     * Category of the chat
     */
    category?: string | null;
    /**
     * Total number of participants in the chat
     */
    platform_participants_count?: number;
    /**
     * Number of active participants in the chat
     */
    active_participants_count?: number | null;
    /**
     * Count of messages in the latest month
     */
    messages_count_last_month?: number | null;
    /**
     * Count of replies in the latest month
     */
    replies_count_last_month?: number | null;
    /**
     * Count the number of appearences in other groups
     */
    forwards_count_last_month?: number | null;
    /**
     * Median number of views per message
     */
    median_views?: number | null;
    /**
     * Average number of reactions per message
     */
    average_reactions?: number | null;
    /**
     * sum of each forwarder's chats participants with overlap
     */
    exposure?: number | null;
    max_capacity?: number | null;
    /**
     * Category of the chat
     */
    category_id?: string | null;
    /**
     * Whether the chat can view participants
     */
    can_view_participants?: boolean | null;
    /**
     * Whether the chat is antispam
     */
    antispam?: boolean | null;
    /**
     * Number of participants in the chat
     */
    participants_count?: number | null;
    /**
     * Linked chat id
     */
    linked_chat_id?: number | null;
    /**
     * Slowmode in seconds
     */
    slowmode_seconds?: number | null;
    /**
     * Whether the chat is a bot
     */
    bot_verification?: boolean | null;
    /**
     * Whether the chat has slowmode enabled
     */
    chats_slowmode_enabled?: boolean | null;
    /**
     * Whether the chat has no forwards enabled
     */
    chats_noforwards?: boolean | null;
    /**
     * Whether the chat has join to send enabled
     */
    chats_join_to_send?: boolean | null;
    /**
     * Whether the chat has join request enabled
     */
    chats_join_request?: boolean | null;
    /**
     * Whether the chat can view messages
     */
    view_messages?: boolean | null;
    /**
     * Whether the chat can send messages
     */
    send_messages?: boolean | null;
    /**
     * Whether the chat can send media
     */
    send_media?: boolean | null;
    /**
     * Whether the chat can send stickers
     */
    send_stickers?: boolean | null;
    /**
     * Whether the chat can send gifs
     */
    send_gifs?: boolean | null;
    /**
     * Whether the chat can send games
     */
    send_games?: boolean | null;
    /**
     * Whether the chat can send inline
     */
    send_inline?: boolean | null;
    /**
     * Whether the chat can embed links
     */
    embed_links?: boolean | null;
    /**
     * Whether the chat can send polls
     */
    send_polls?: boolean | null;
    /**
     * Whether the chat can change info
     */
    change_info?: boolean | null;
    /**
     * Whether the chat can invite users
     */
    invite_users?: boolean | null;
    /**
     * Whether the chat can pin messages
     */
    pin_messages?: boolean | null;
    /**
     * Whether the chat can manage topics
     */
    manage_topics?: boolean | null;
    /**
     * Whether the chat can send photos
     */
    send_photos?: boolean | null;
    /**
     * Whether the chat can send videos
     */
    send_videos?: boolean | null;
    /**
     * Whether the chat can send round videos
     */
    send_roundvideos?: boolean | null;
    /**
     * Whether the chat can send audios
     */
    send_audios?: boolean | null;
    /**
     * Whether the chat can send voices
     */
    send_voices?: boolean | null;
    /**
     * Whether the chat can send docs
     */
    send_docs?: boolean | null;
    /**
     * Whether the chat can send plain
     */
    send_plain?: boolean | null;
    /**
     * Whether the chat can broadcast
     */
    chats_broadcast?: boolean | null;
    /**
     * Number of messages in the latest month
     */
    analysis_message_count_last_month?: number | null;
    /**
     * Number of active participants in the chat
     */
    analysis_active_participants?: number | null;
    /**
     * Number of times the chat was forwarded
     */
    analysis_num_of_times_forwarded?: number | null;
    /**
     * Number of channels forwarding the chat
     */
    analysis_num_of_channels_forwarding?: number | null;
    /**
     * Number of times the chat was forwarded
     */
    analysis_num_of_times_forwards?: number | null;
    /**
     * Number of channels forwarding the chat
     */
    analysis_num_of_channels_forwards?: number | null;
};

export type ChatType = 'User' | 'Group' | 'Channel' | 'Bot' | 'Unknown';

/**
 * Class representing the model of the dialog model of TL in IndexedDB
 * TODO: Should not be in common, needs to be translated to a contact_info...
 */
export type DialogValue = {
    peer_id: number;
    read_inbox_max_id: number;
    read_outbox_max_id: number;
    top_message: number;
    unread_count: number;
    unread_mentions_count: number;
    unread_reactions_count: number;
};

export type EchoMissionInput = {
    target_group_id: string;
    message: MessageForwardRequest;
    origin_ids: Array<string>;
    categories: Array<string>;
    /**
     * The time to start the mission - in UTC timezone
     */
    trigger_time?: string | null;
    max_retries?: number | null;
    keep_hype?: boolean;
    scenario_external_id?: string | null;
};

export type EventStatus = 'scheduled' | 'failed' | 'in_process' | 'completed';

export type FirstPuppetShowMessage = {
    message: Message;
    start_time?: string | null;
};

export type FluffMissionInput = {
    /**
     * If character_ids is provided, this field is ignored
     */
    origin_ids?: Array<string> | null;
    /**
     * If origin_ids is provided, this field is ignored
     */
    character_ids?: Array<string> | null;
    is_routine?: boolean | null;
    batch_size?: number | null;
};

export type ForwardMessageAction = {
    id?: string;
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural';
    prefrences?: ActionPrefrences;
    args: ForwardMessageArgs;
};

export type ForwardMessageArgs = {
    from_chat: ChatInfo;
    message_info: AppModelsOperatorCommonMessageInfoMessageInfo | string;
    target_chat: ChatInfo;
    message?: InputMessage | null;
};

export type ForwardMessageResponseContentInput = {
    message_info: AppModelsOperatorCommonMessageInfoMessageInfo;
};

export type ForwardMessageResponseContentOutput = {
    message_info: MessageInfoOutput;
};

export type GroupInfo = {
    id?: number | null;
    name?: string | null;
    title?: string | null;
    type?: ChatType;
    description?: string | null;
    members?: number | null;
    online?: number | null;
};

export type HttpOperatorValidationError = {
    detail?: Array<OperatorValidationError> | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type InputMessage = {
    text?: string | null;
    attachments?: Array<Attachment>;
};

export type JoinGroupAction = {
    id?: string;
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural';
    prefrences?: ActionPrefrences;
    args: JoinGroupArgs;
};

export type JoinGroupArgs = {
    chat?: ChatInfo | null;
    join_discussion_group_if_availble?: boolean;
    invite_link?: string | null;
};

export type JoinGroupResponseContentInput = {
    chat_info: ChannelInfo | GroupInfo | null;
    discussion_group_chat_info: ChannelInfo | GroupInfo | null;
};

export type JoinGroupResponseContentOutput = {
    chat_info: ChannelInfo | GroupInfo | null;
    discussion_group_chat_info: ChannelInfo | GroupInfo | null;
};

export type LeaveGroupAction = {
    id?: string;
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural';
    prefrences?: ActionPrefrences;
    args: LeaveGroupArgs;
};

export type LeaveGroupArgs = {
    chat: ChatInfo;
};

export type LeaveGroupResponseContent = {
    [key: string]: unknown;
};

export type Message = {
    message_content: InputMessage;
    metadata: MessageMetadata;
    replies?: Array<Message>;
};

export type MessageForwardRequest = {
    message_content?: InputMessage | null;
    message_info?: AppModelsPlannerMessageInfo | string | null;
};

export type MessageInfoOutput = {
    timestamp: string;
    peer_id?: string | null;
    from_id?: string | null;
    text_hash?: string | null;
    message_id?: string | null;
    viewer_id?: string | null;
};

export type MessageMetadata = {
    chat_id: string;
    character_id: string;
    relative_seconds?: number;
};

export type MissionCreate = {
    description?: string | null;
    payload: {
        [key: string]: unknown;
    };
    mission_type: string;
    status_code?: MissionStatus | null;
};

export type MissionRead = {
    id: string;
    created_at: string;
    updated_at: string;
    description?: string | null;
    payload: {
        [key: string]: unknown;
    };
    mission_type: string;
    status_code?: MissionStatus | null;
    scenarios?: Array<ScenarioRead>;
};

export type MissionStatus = 'submitted' | 'planning' | 'failed_planning' | 'running' | 'completed' | 'canceled' | 'planned';

export type OperatorValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type Prefrences = {
    actions_timeout?: number | null;
    action_interval?: number | null;
    close_browser_when_finished?: boolean | null;
    should_login_telegram?: boolean | null;
    verify_proxy_working?: boolean | null;
    fail_fast?: boolean | null;
};

export type PuppetShowInput = {
    first_messages: Array<FirstPuppetShowMessage>;
    max_retries?: number | null;
};

export type ReplyToMessageAction = {
    id?: string;
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural';
    prefrences?: ActionPrefrences;
    args: ReplyToMessageArgs;
};

export type ReplyToMessageArgs = {
    chat: ChatInfo;
    message_info: AppModelsOperatorCommonMessageInfoMessageInfo | string;
    input_message_content: InputMessage;
};

export type ReplyToMessageResponseContentInput = {
    message_info: AppModelsOperatorCommonMessageInfoMessageInfo;
};

export type ReplyToMessageResponseContentOutput = {
    message_info: MessageInfoOutput;
};

export type Scenario = {
    id?: string;
    profile: Character;
    prefrences: Prefrences;
    actions: Array<JoinGroupAction | LeaveGroupAction | ReplyToMessageAction | SendMessageAction | ForwardMessageAction | BehaviouralAction | SendBulkMessagesAction>;
};

export type ScenarioCreate = {
    description: string;
    trigger_time: string;
    actions?: Array<ActionCreate>;
    external_id?: string | null;
    scenario_parent_id?: string | null;
    character_id: string;
    mission_id: string | null;
    expiration_time?: string | null;
    max_retries?: number;
};

export type ScenarioInfo = {
    start_time: string;
    end_time?: string | null;
};

export type ScenarioRead = {
    id: string;
    created_at: string;
    updated_at: string;
    description: string;
    trigger_time: string;
    status_code?: AppModelsScenariosScenarioStatus;
    start_time?: string | null;
    end_time?: string | null;
    error?: string | null;
    scenario_parent_id?: string | null;
    external_id?: string | null;
    character_id: string;
    expiration_time?: string | null;
    retries?: number;
    max_retries?: number;
    actions?: Array<ActionRead>;
    mission_id: string;
};

export type ScenarioResultInput = {
    id?: string;
    status: AppModelsOperatorActivityScenarioScenarioStatus;
    scenario_info: ScenarioInfo;
    actions_responses: Array<ActionResponseInput>;
};

export type ScenarioResultOutput = {
    id?: string;
    status: AppModelsOperatorActivityScenarioScenarioStatus;
    scenario_info: ScenarioInfo;
    actions_responses: Array<ActionResponseOutput>;
};

export type ScenarioResultStatus = 'success' | 'failed' | 'pending' | 'finished';

export type ScenarioUpdate = {
    status_code?: AppModelsScenariosScenarioStatus;
    start_time?: string | null;
    end_time?: string | null;
    error?: string | null;
    retries?: number;
};

export type ScheduledEventCreate = {
    character_id: string;
    trigger_time: string;
};

export type ScheduledEventRead = {
    id: string;
    created_at: string;
    updated_at: string;
    trigger_time?: string;
    status_code?: EventStatus;
    character_id: string;
};

export type SendBulkMessagesAction = {
    id?: string;
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural';
    prefrences?: ActionPrefrences;
    args: SendBulkMessagesArgs;
};

export type SendBulkMessagesArgs = {
    chat: ChatInfo;
    messages: Array<string>;
    interval?: number;
};

export type SendBulkMessagesResponseContentInput = {
    message_infos: Array<AppModelsOperatorCommonMessageInfoMessageInfo>;
};

export type SendBulkMessagesResponseContentOutput = {
    message_infos: Array<MessageInfoOutput>;
};

export type SendMessageAction = {
    id?: string;
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural';
    prefrences?: ActionPrefrences;
    args: SendMessageArgs;
};

export type SendMessageArgs = {
    chat: ChatInfo;
    input_message_content: InputMessage;
};

export type SendMessageResponseContentInput = {
    message_info: AppModelsOperatorCommonMessageInfoMessageInfo;
};

export type SendMessageResponseContentOutput = {
    message_info: MessageInfoOutput;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type AppModelsActionsActionStatus = 'scheduled' | 'in_process' | 'running' | 'success' | 'failed' | 'cancelled' | 'pending' | 'planned';

export type AppModelsOperatorActivityActionsActionStatusActionStatus = {
    status_code: ActionStatusCode;
    error?: string | null;
};

export type AppModelsOperatorActivityScenarioScenarioStatus = {
    status_code: ScenarioResultStatus;
    error?: string | null;
};

export type AppModelsOperatorCommonMessageInfoMessageInfo = {
    timestamp: string;
    peer_id?: string | null;
    from_id?: string | null;
    text_hash?: string | null;
    message_id?: string | null;
    viewer_id?: string | null;
};

export type AppModelsPlannerMessageInfo = {
    platform_chat_id?: number | null;
    platform_chat_name?: string | null;
    timestamp: string;
    peer_id?: string | null;
    from_id?: string | null;
    text_hash?: string | null;
    message_id?: string | null;
    viewer_id?: string | null;
};

export type AppModelsScenariosScenarioStatus = 'scheduled' | 'pending' | 'running' | 'success' | 'failed' | 'cancelled' | 'in_process' | 'planned';

export type GetScenariosScenariosGetData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        limit?: number;
    };
    url: '/scenarios/';
};

export type GetScenariosScenariosGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetScenariosScenariosGetError = GetScenariosScenariosGetErrors[keyof GetScenariosScenariosGetErrors];

export type GetScenariosScenariosGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ScenarioRead>;
};

export type GetScenariosScenariosGetResponse = GetScenariosScenariosGetResponses[keyof GetScenariosScenariosGetResponses];

export type CreateScenarioScenariosPostData = {
    body: ScenarioCreate;
    path?: never;
    query?: never;
    url: '/scenarios/';
};

export type CreateScenarioScenariosPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateScenarioScenariosPostError = CreateScenarioScenariosPostErrors[keyof CreateScenarioScenariosPostErrors];

export type CreateScenarioScenariosPostResponses = {
    /**
     * Successful Response
     */
    200: ScenarioRead;
};

export type CreateScenarioScenariosPostResponse = CreateScenarioScenariosPostResponses[keyof CreateScenarioScenariosPostResponses];

export type GetScenarioScenariosScenarioIdGetData = {
    body?: never;
    path: {
        scenario_id: string;
    };
    query?: never;
    url: '/scenarios/{scenario_id}';
};

export type GetScenarioScenariosScenarioIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetScenarioScenariosScenarioIdGetError = GetScenarioScenariosScenarioIdGetErrors[keyof GetScenarioScenariosScenarioIdGetErrors];

export type GetScenarioScenariosScenarioIdGetResponses = {
    /**
     * Successful Response
     */
    200: ScenarioRead;
};

export type GetScenarioScenariosScenarioIdGetResponse = GetScenarioScenariosScenarioIdGetResponses[keyof GetScenarioScenariosScenarioIdGetResponses];

export type UpdateScenarioScenariosScenarioIdPutData = {
    body: ScenarioUpdate;
    path: {
        scenario_id: string;
    };
    query?: never;
    url: '/scenarios/{scenario_id}';
};

export type UpdateScenarioScenariosScenarioIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateScenarioScenariosScenarioIdPutError = UpdateScenarioScenariosScenarioIdPutErrors[keyof UpdateScenarioScenariosScenarioIdPutErrors];

export type UpdateScenarioScenariosScenarioIdPutResponses = {
    /**
     * Successful Response
     */
    200: ScenarioRead;
};

export type UpdateScenarioScenariosScenarioIdPutResponse = UpdateScenarioScenariosScenarioIdPutResponses[keyof UpdateScenarioScenariosScenarioIdPutResponses];

export type GetScenarioChildrensScenariosScenarioIdChildrensGetData = {
    body?: never;
    path: {
        scenario_id: string;
    };
    query?: never;
    url: '/scenarios/{scenario_id}/childrens';
};

export type GetScenarioChildrensScenariosScenarioIdChildrensGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetScenarioChildrensScenariosScenarioIdChildrensGetError = GetScenarioChildrensScenariosScenarioIdChildrensGetErrors[keyof GetScenarioChildrensScenariosScenarioIdChildrensGetErrors];

export type GetScenarioChildrensScenariosScenarioIdChildrensGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetScenarioParentsScenariosScenarioIdParentGetData = {
    body?: never;
    path: {
        scenario_id: string;
    };
    query?: never;
    url: '/scenarios/{scenario_id}/parent';
};

export type GetScenarioParentsScenariosScenarioIdParentGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetScenarioParentsScenariosScenarioIdParentGetError = GetScenarioParentsScenariosScenarioIdParentGetErrors[keyof GetScenarioParentsScenariosScenarioIdParentGetErrors];

export type GetScenarioParentsScenariosScenarioIdParentGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CancelScenarioScenariosScenarioIdCancelPostData = {
    body?: never;
    path: {
        scenario_id: string;
    };
    query?: {
        error?: string;
    };
    url: '/scenarios/{scenario_id}/cancel';
};

export type CancelScenarioScenariosScenarioIdCancelPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CancelScenarioScenariosScenarioIdCancelPostError = CancelScenarioScenariosScenarioIdCancelPostErrors[keyof CancelScenarioScenariosScenarioIdCancelPostErrors];

export type CancelScenarioScenariosScenarioIdCancelPostResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type CancelScenarioScenariosScenarioIdCancelPostResponse = CancelScenarioScenariosScenarioIdCancelPostResponses[keyof CancelScenarioScenariosScenarioIdCancelPostResponses];

export type RerunScenarioScenariosScenarioIdRerunGetData = {
    body?: never;
    path: {
        scenario_id: string;
    };
    query?: never;
    url: '/scenarios/{scenario_id}/rerun';
};

export type RerunScenarioScenariosScenarioIdRerunGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RerunScenarioScenariosScenarioIdRerunGetError = RerunScenarioScenariosScenarioIdRerunGetErrors[keyof RerunScenarioScenariosScenarioIdRerunGetErrors];

export type RerunScenarioScenariosScenarioIdRerunGetResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type RerunScenarioScenariosScenarioIdRerunGetResponse = RerunScenarioScenariosScenarioIdRerunGetResponses[keyof RerunScenarioScenariosScenarioIdRerunGetResponses];

export type RescheduledScenariosScenariosRescheduledScenariosPostData = {
    body?: never;
    path?: never;
    query?: {
        delay_minutes?: number;
    };
    url: '/scenarios/rescheduled_scenarios/';
};

export type RescheduledScenariosScenariosRescheduledScenariosPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RescheduledScenariosScenariosRescheduledScenariosPostError = RescheduledScenariosScenariosRescheduledScenariosPostErrors[keyof RescheduledScenariosScenariosRescheduledScenariosPostErrors];

export type RescheduledScenariosScenariosRescheduledScenariosPostResponses = {
    /**
     * Successful Response
     */
    200: Array<ScenarioRead>;
};

export type RescheduledScenariosScenariosRescheduledScenariosPostResponse = RescheduledScenariosScenariosRescheduledScenariosPostResponses[keyof RescheduledScenariosScenariosRescheduledScenariosPostResponses];

export type GetActionActionsActionIdGetData = {
    body?: never;
    path: {
        action_id: string;
    };
    query?: never;
    url: '/actions/{action_id}';
};

export type GetActionActionsActionIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetActionActionsActionIdGetError = GetActionActionsActionIdGetErrors[keyof GetActionActionsActionIdGetErrors];

export type GetActionActionsActionIdGetResponses = {
    /**
     * Successful Response
     */
    200: ActionRead;
};

export type GetActionActionsActionIdGetResponse = GetActionActionsActionIdGetResponses[keyof GetActionActionsActionIdGetResponses];

export type UpdateActionStatusActionsActionIdStatusPutData = {
    body: ActionStatusUpdate;
    path: {
        action_id: string;
    };
    query?: never;
    url: '/actions/{action_id}/status';
};

export type UpdateActionStatusActionsActionIdStatusPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateActionStatusActionsActionIdStatusPutError = UpdateActionStatusActionsActionIdStatusPutErrors[keyof UpdateActionStatusActionsActionIdStatusPutErrors];

export type UpdateActionStatusActionsActionIdStatusPutResponses = {
    /**
     * Successful Response
     */
    200: ActionRead;
};

export type UpdateActionStatusActionsActionIdStatusPutResponse = UpdateActionStatusActionsActionIdStatusPutResponses[keyof UpdateActionStatusActionsActionIdStatusPutResponses];

export type GetEventsToProcessScheduledEventsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/scheduled-events/';
};

export type GetEventsToProcessScheduledEventsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetEventsToProcessScheduledEventsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ScheduledEventRead>;
};

export type GetEventsToProcessScheduledEventsGetResponse = GetEventsToProcessScheduledEventsGetResponses[keyof GetEventsToProcessScheduledEventsGetResponses];

export type CreateScheduledEventScheduledEventsPostData = {
    body: ScheduledEventCreate;
    path?: never;
    query?: never;
    url: '/scheduled-events/';
};

export type CreateScheduledEventScheduledEventsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateScheduledEventScheduledEventsPostError = CreateScheduledEventScheduledEventsPostErrors[keyof CreateScheduledEventScheduledEventsPostErrors];

export type CreateScheduledEventScheduledEventsPostResponses = {
    /**
     * Successful Response
     */
    200: ScheduledEventRead;
};

export type CreateScheduledEventScheduledEventsPostResponse = CreateScheduledEventScheduledEventsPostResponses[keyof CreateScheduledEventScheduledEventsPostResponses];

export type GetScheduledEventScheduledEventsEventIdGetData = {
    body?: never;
    path: {
        event_id: string;
    };
    query?: never;
    url: '/scheduled-events/{event_id}';
};

export type GetScheduledEventScheduledEventsEventIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetScheduledEventScheduledEventsEventIdGetError = GetScheduledEventScheduledEventsEventIdGetErrors[keyof GetScheduledEventScheduledEventsEventIdGetErrors];

export type GetScheduledEventScheduledEventsEventIdGetResponses = {
    /**
     * Successful Response
     */
    200: ScheduledEventRead;
};

export type GetScheduledEventScheduledEventsEventIdGetResponse = GetScheduledEventScheduledEventsEventIdGetResponses[keyof GetScheduledEventScheduledEventsEventIdGetResponses];

export type RescheduledEventsScheduledEventsRescheduledEventsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/scheduled-events/rescheduled_events/';
};

export type RescheduledEventsScheduledEventsRescheduledEventsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type RescheduledEventsScheduledEventsRescheduledEventsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAllCharactersCharactersGetData = {
    body?: never;
    path?: never;
    query?: {
        is_active?: boolean;
        skip?: number;
        limit?: number;
    };
    url: '/characters/';
};

export type GetAllCharactersCharactersGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllCharactersCharactersGetError = GetAllCharactersCharactersGetErrors[keyof GetAllCharactersCharactersGetErrors];

export type GetAllCharactersCharactersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CharacterRead>;
};

export type GetAllCharactersCharactersGetResponse = GetAllCharactersCharactersGetResponses[keyof GetAllCharactersCharactersGetResponses];

export type CreateCharacterCharactersPostData = {
    body: CharacterCreate;
    path?: never;
    query?: never;
    url: '/characters/';
};

export type CreateCharacterCharactersPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCharacterCharactersPostError = CreateCharacterCharactersPostErrors[keyof CreateCharacterCharactersPostErrors];

export type CreateCharacterCharactersPostResponses = {
    /**
     * Successful Response
     */
    200: CharacterRead;
};

export type CreateCharacterCharactersPostResponse = CreateCharacterCharactersPostResponses[keyof CreateCharacterCharactersPostResponses];

export type DeleteCharacterCharactersCharacterIdDeleteData = {
    body?: never;
    path: {
        character_id: string;
    };
    query?: never;
    url: '/characters/{character_id}';
};

export type DeleteCharacterCharactersCharacterIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCharacterCharactersCharacterIdDeleteError = DeleteCharacterCharactersCharacterIdDeleteErrors[keyof DeleteCharacterCharactersCharacterIdDeleteErrors];

export type DeleteCharacterCharactersCharacterIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCharacterCharactersCharacterIdGetData = {
    body?: never;
    path: {
        character_id: string;
    };
    query?: never;
    url: '/characters/{character_id}';
};

export type GetCharacterCharactersCharacterIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCharacterCharactersCharacterIdGetError = GetCharacterCharactersCharacterIdGetErrors[keyof GetCharacterCharactersCharacterIdGetErrors];

export type GetCharacterCharactersCharacterIdGetResponses = {
    /**
     * Successful Response
     */
    200: CharacterRead;
};

export type GetCharacterCharactersCharacterIdGetResponse = GetCharacterCharactersCharacterIdGetResponses[keyof GetCharacterCharactersCharacterIdGetResponses];

export type UpdateCharacterCharactersCharacterIdPutData = {
    body: CharacterCreate;
    path: {
        character_id: string;
    };
    query?: never;
    url: '/characters/{character_id}';
};

export type UpdateCharacterCharactersCharacterIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCharacterCharactersCharacterIdPutError = UpdateCharacterCharactersCharacterIdPutErrors[keyof UpdateCharacterCharactersCharacterIdPutErrors];

export type UpdateCharacterCharactersCharacterIdPutResponses = {
    /**
     * Successful Response
     */
    200: CharacterRead;
};

export type UpdateCharacterCharactersCharacterIdPutResponse = UpdateCharacterCharactersCharacterIdPutResponses[keyof UpdateCharacterCharactersCharacterIdPutResponses];

export type GetCharacterByNameCharactersNameNameGetData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/characters/name/{name}';
};

export type GetCharacterByNameCharactersNameNameGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCharacterByNameCharactersNameNameGetError = GetCharacterByNameCharactersNameNameGetErrors[keyof GetCharacterByNameCharactersNameNameGetErrors];

export type GetCharacterByNameCharactersNameNameGetResponses = {
    /**
     * Successful Response
     */
    200: CharacterRead;
};

export type GetCharacterByNameCharactersNameNameGetResponse = GetCharacterByNameCharactersNameNameGetResponses[keyof GetCharacterByNameCharactersNameNameGetResponses];

export type GetBotCharactersCharactersBotsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/characters/bots/';
};

export type GetBotCharactersCharactersBotsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetBotCharactersCharactersBotsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CharacterRead>;
};

export type GetBotCharactersCharactersBotsGetResponse = GetBotCharactersCharactersBotsGetResponses[keyof GetBotCharactersCharactersBotsGetResponses];

export type GetHumanCharactersCharactersHumansGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/characters/humans/';
};

export type GetHumanCharactersCharactersHumansGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetHumanCharactersCharactersHumansGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CharacterRead>;
};

export type GetHumanCharactersCharactersHumansGetResponse = GetHumanCharactersCharactersHumansGetResponses[keyof GetHumanCharactersCharactersHumansGetResponses];

export type GetCharacterChatsCharactersCharacterIdChatsGetData = {
    body?: never;
    path: {
        character_id: string;
    };
    query?: never;
    url: '/characters/{character_id}/chats';
};

export type GetCharacterChatsCharactersCharacterIdChatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCharacterChatsCharactersCharacterIdChatsGetError = GetCharacterChatsCharactersCharacterIdChatsGetErrors[keyof GetCharacterChatsCharactersCharacterIdChatsGetErrors];

export type GetCharacterChatsCharactersCharacterIdChatsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ChatRead> | null;
};

export type GetCharacterChatsCharactersCharacterIdChatsGetResponse = GetCharacterChatsCharactersCharacterIdChatsGetResponses[keyof GetCharacterChatsCharactersCharacterIdChatsGetResponses];

export type AddCharacterToChatCharactersCharacterIdChatsChatIdPostData = {
    body?: never;
    path: {
        character_id: string;
        chat_id: string;
    };
    query?: never;
    url: '/characters/{character_id}/chats/{chat_id}';
};

export type AddCharacterToChatCharactersCharacterIdChatsChatIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddCharacterToChatCharactersCharacterIdChatsChatIdPostError = AddCharacterToChatCharactersCharacterIdChatsChatIdPostErrors[keyof AddCharacterToChatCharactersCharacterIdChatsChatIdPostErrors];

export type AddCharacterToChatCharactersCharacterIdChatsChatIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSlotsCountCharactersSlotsCountGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/characters/slots_count/';
};

export type GetSlotsCountCharactersSlotsCountGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetSlotsCountCharactersSlotsCountGetResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: number;
    };
};

export type GetSlotsCountCharactersSlotsCountGetResponse = GetSlotsCountCharactersSlotsCountGetResponses[keyof GetSlotsCountCharactersSlotsCountGetResponses];

export type GetOriginsCharactersOriginsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/characters/origins/';
};

export type GetOriginsCharactersOriginsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetOriginsCharactersOriginsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<string>;
};

export type GetOriginsCharactersOriginsGetResponse = GetOriginsCharactersOriginsGetResponses[keyof GetOriginsCharactersOriginsGetResponses];

export type GetOriginsCharactersOriginsOriginCharactersGetData = {
    body?: never;
    path: {
        origin: string;
    };
    query?: never;
    url: '/characters/origins/{origin}/characters/';
};

export type GetOriginsCharactersOriginsOriginCharactersGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOriginsCharactersOriginsOriginCharactersGetError = GetOriginsCharactersOriginsOriginCharactersGetErrors[keyof GetOriginsCharactersOriginsOriginCharactersGetErrors];

export type GetOriginsCharactersOriginsOriginCharactersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CharacterRead>;
};

export type GetOriginsCharactersOriginsOriginCharactersGetResponse = GetOriginsCharactersOriginsOriginCharactersGetResponses[keyof GetOriginsCharactersOriginsOriginCharactersGetResponses];

export type GetCharacterCategoriesCharactersCharacterIdCategoriesGetData = {
    body?: never;
    path: {
        character_id: string;
    };
    query?: never;
    url: '/characters/{character_id}/categories/';
};

export type GetCharacterCategoriesCharactersCharacterIdCategoriesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCharacterCategoriesCharactersCharacterIdCategoriesGetError = GetCharacterCategoriesCharactersCharacterIdCategoriesGetErrors[keyof GetCharacterCategoriesCharactersCharacterIdCategoriesGetErrors];

export type GetCharacterCategoriesCharactersCharacterIdCategoriesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CategoryRead>;
};

export type GetCharacterCategoriesCharactersCharacterIdCategoriesGetResponse = GetCharacterCategoriesCharactersCharacterIdCategoriesGetResponses[keyof GetCharacterCategoriesCharactersCharacterIdCategoriesGetResponses];

export type RemoveCharacterFromCategoryCharactersCharacterIdCategoriesCategoryIdDeleteData = {
    body?: never;
    path: {
        character_id: string;
        category_id: string;
    };
    query?: never;
    url: '/characters/{character_id}/categories/{category_id}';
};

export type RemoveCharacterFromCategoryCharactersCharacterIdCategoriesCategoryIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveCharacterFromCategoryCharactersCharacterIdCategoriesCategoryIdDeleteError = RemoveCharacterFromCategoryCharactersCharacterIdCategoriesCategoryIdDeleteErrors[keyof RemoveCharacterFromCategoryCharactersCharacterIdCategoriesCategoryIdDeleteErrors];

export type RemoveCharacterFromCategoryCharactersCharacterIdCategoriesCategoryIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddCharacterToCategoryCharactersCharacterIdCategoriesCategoryIdPostData = {
    body?: never;
    path: {
        character_id: string;
        category_id: string;
    };
    query?: never;
    url: '/characters/{character_id}/categories/{category_id}';
};

export type AddCharacterToCategoryCharactersCharacterIdCategoriesCategoryIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddCharacterToCategoryCharactersCharacterIdCategoriesCategoryIdPostError = AddCharacterToCategoryCharactersCharacterIdCategoriesCategoryIdPostErrors[keyof AddCharacterToCategoryCharactersCharacterIdCategoriesCategoryIdPostErrors];

export type AddCharacterToCategoryCharactersCharacterIdCategoriesCategoryIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAllChatsChatsGetData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        limit?: number;
    };
    url: '/chats/';
};

export type GetAllChatsChatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllChatsChatsGetError = GetAllChatsChatsGetErrors[keyof GetAllChatsChatsGetErrors];

export type GetAllChatsChatsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ChatRead>;
};

export type GetAllChatsChatsGetResponse = GetAllChatsChatsGetResponses[keyof GetAllChatsChatsGetResponses];

export type CreateChatsFromCsvChatsPostData = {
    body?: never;
    path?: never;
    query: {
        csv_path: string;
    };
    url: '/chats/';
};

export type CreateChatsFromCsvChatsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateChatsFromCsvChatsPostError = CreateChatsFromCsvChatsPostErrors[keyof CreateChatsFromCsvChatsPostErrors];

export type CreateChatsFromCsvChatsPostResponses = {
    /**
     * Successful Response
     */
    200: ChatRead;
};

export type CreateChatsFromCsvChatsPostResponse = CreateChatsFromCsvChatsPostResponses[keyof CreateChatsFromCsvChatsPostResponses];

export type DeleteChatChatsChatIdDeleteData = {
    body?: never;
    path: {
        chat_id: string;
    };
    query?: never;
    url: '/chats/{chat_id}';
};

export type DeleteChatChatsChatIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteChatChatsChatIdDeleteError = DeleteChatChatsChatIdDeleteErrors[keyof DeleteChatChatsChatIdDeleteErrors];

export type DeleteChatChatsChatIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetChatChatsChatIdGetData = {
    body?: never;
    path: {
        chat_id: string;
    };
    query?: never;
    url: '/chats/{chat_id}';
};

export type GetChatChatsChatIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetChatChatsChatIdGetError = GetChatChatsChatIdGetErrors[keyof GetChatChatsChatIdGetErrors];

export type GetChatChatsChatIdGetResponses = {
    /**
     * Successful Response
     */
    200: ChatRead;
};

export type GetChatChatsChatIdGetResponse = GetChatChatsChatIdGetResponses[keyof GetChatChatsChatIdGetResponses];

export type UpdateChatChatsChatIdPutData = {
    body: ChatCreate;
    path: {
        chat_id: string;
    };
    query?: never;
    url: '/chats/{chat_id}';
};

export type UpdateChatChatsChatIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateChatChatsChatIdPutError = UpdateChatChatsChatIdPutErrors[keyof UpdateChatChatsChatIdPutErrors];

export type UpdateChatChatsChatIdPutResponses = {
    /**
     * Successful Response
     */
    200: ChatRead;
};

export type UpdateChatChatsChatIdPutResponse = UpdateChatChatsChatIdPutResponses[keyof UpdateChatChatsChatIdPutResponses];

export type GetChatByUsernameChatsUsernameUsernameGetData = {
    body?: never;
    path: {
        username: string;
    };
    query?: never;
    url: '/chats/username/{username}';
};

export type GetChatByUsernameChatsUsernameUsernameGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetChatByUsernameChatsUsernameUsernameGetError = GetChatByUsernameChatsUsernameUsernameGetErrors[keyof GetChatByUsernameChatsUsernameUsernameGetErrors];

export type GetChatByUsernameChatsUsernameUsernameGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ChatRead>;
};

export type GetChatByUsernameChatsUsernameUsernameGetResponse = GetChatByUsernameChatsUsernameUsernameGetResponses[keyof GetChatByUsernameChatsUsernameUsernameGetResponses];

export type GetChatCharactersChatsChatIdCharactersGetData = {
    body?: never;
    path: {
        chat_id: string;
    };
    query?: never;
    url: '/chats/{chat_id}/characters';
};

export type GetChatCharactersChatsChatIdCharactersGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetChatCharactersChatsChatIdCharactersGetError = GetChatCharactersChatsChatIdCharactersGetErrors[keyof GetChatCharactersChatsChatIdCharactersGetErrors];

export type GetChatCharactersChatsChatIdCharactersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CharacterRead>;
};

export type GetChatCharactersChatsChatIdCharactersGetResponse = GetChatCharactersChatsChatIdCharactersGetResponses[keyof GetChatCharactersChatsChatIdCharactersGetResponses];

export type RemoveCharacterFromChatChatsChatIdCharactersCharacterIdDeleteData = {
    body?: never;
    path: {
        chat_id: string;
        character_id: string;
    };
    query?: never;
    url: '/chats/{chat_id}/characters/{character_id}';
};

export type RemoveCharacterFromChatChatsChatIdCharactersCharacterIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveCharacterFromChatChatsChatIdCharactersCharacterIdDeleteError = RemoveCharacterFromChatChatsChatIdCharactersCharacterIdDeleteErrors[keyof RemoveCharacterFromChatChatsChatIdCharactersCharacterIdDeleteErrors];

export type RemoveCharacterFromChatChatsChatIdCharactersCharacterIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddCharacterToChatChatsChatIdCharactersCharacterIdPostData = {
    body?: never;
    path: {
        chat_id: string;
        character_id: string;
    };
    query?: never;
    url: '/chats/{chat_id}/characters/{character_id}';
};

export type AddCharacterToChatChatsChatIdCharactersCharacterIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddCharacterToChatChatsChatIdCharactersCharacterIdPostError = AddCharacterToChatChatsChatIdCharactersCharacterIdPostErrors[keyof AddCharacterToChatChatsChatIdCharactersCharacterIdPostErrors];

export type AddCharacterToChatChatsChatIdCharactersCharacterIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCategoriesChatsCategoriesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/chats/categories/';
};

export type GetCategoriesChatsCategoriesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetCategoriesChatsCategoriesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<string>;
};

export type GetCategoriesChatsCategoriesGetResponse = GetCategoriesChatsCategoriesGetResponses[keyof GetCategoriesChatsCategoriesGetResponses];

export type GetChatsByCategoryChatsCategoriesCategoryChatsGetData = {
    body?: never;
    path: {
        category: string;
    };
    query?: never;
    url: '/chats/categories/{category}/chats/';
};

export type GetChatsByCategoryChatsCategoriesCategoryChatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetChatsByCategoryChatsCategoriesCategoryChatsGetError = GetChatsByCategoryChatsCategoriesCategoryChatsGetErrors[keyof GetChatsByCategoryChatsCategoriesCategoryChatsGetErrors];

export type GetChatsByCategoryChatsCategoriesCategoryChatsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ChatRead>;
};

export type GetChatsByCategoryChatsCategoriesCategoryChatsGetResponse = GetChatsByCategoryChatsCategoriesCategoryChatsGetResponses[keyof GetChatsByCategoryChatsCategoriesCategoryChatsGetResponses];

export type GetChatCategoriesChatsChatIdCategoriesGetData = {
    body?: never;
    path: {
        chat_id: string;
    };
    query?: never;
    url: '/chats/{chat_id}/categories/';
};

export type GetChatCategoriesChatsChatIdCategoriesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetChatCategoriesChatsChatIdCategoriesGetError = GetChatCategoriesChatsChatIdCategoriesGetErrors[keyof GetChatCategoriesChatsChatIdCategoriesGetErrors];

export type GetChatCategoriesChatsChatIdCategoriesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CategoryRead>;
};

export type GetChatCategoriesChatsChatIdCategoriesGetResponse = GetChatCategoriesChatsChatIdCategoriesGetResponses[keyof GetChatCategoriesChatsChatIdCategoriesGetResponses];

export type RemoveChatFromCategoryChatsChatIdCategoriesCategoryIdDeleteData = {
    body?: never;
    path: {
        chat_id: string;
        category_id: string;
    };
    query?: never;
    url: '/chats/{chat_id}/categories/{category_id}';
};

export type RemoveChatFromCategoryChatsChatIdCategoriesCategoryIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveChatFromCategoryChatsChatIdCategoriesCategoryIdDeleteError = RemoveChatFromCategoryChatsChatIdCategoriesCategoryIdDeleteErrors[keyof RemoveChatFromCategoryChatsChatIdCategoriesCategoryIdDeleteErrors];

export type RemoveChatFromCategoryChatsChatIdCategoriesCategoryIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddChatToCategoryChatsChatIdCategoriesCategoryIdPostData = {
    body?: never;
    path: {
        chat_id: string;
        category_id: string;
    };
    query?: never;
    url: '/chats/{chat_id}/categories/{category_id}';
};

export type AddChatToCategoryChatsChatIdCategoriesCategoryIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddChatToCategoryChatsChatIdCategoriesCategoryIdPostError = AddChatToCategoryChatsChatIdCategoriesCategoryIdPostErrors[keyof AddChatToCategoryChatsChatIdCategoriesCategoryIdPostErrors];

export type AddChatToCategoryChatsChatIdCategoriesCategoryIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type SubmitScenarioScenarioPostOperatorScenarioPostData = {
    body: ScenarioResultInput;
    path?: never;
    query?: never;
    url: '/operator/scenario';
};

export type SubmitScenarioScenarioPostOperatorScenarioPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Unprocessable Entity
     */
    422: HttpOperatorValidationError;
};

export type SubmitScenarioScenarioPostOperatorScenarioPostError = SubmitScenarioScenarioPostOperatorScenarioPostErrors[keyof SubmitScenarioScenarioPostOperatorScenarioPostErrors];

export type SubmitScenarioScenarioPostOperatorScenarioPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type SubmitScenarioScenarioPostOperatorScenarioPostResponse = SubmitScenarioScenarioPostOperatorScenarioPostResponses[keyof SubmitScenarioScenarioPostOperatorScenarioPostResponses];

export type GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetData = {
    body?: never;
    path: {
        scenario_id: string;
    };
    query?: never;
    url: '/operator/scenario/{scenario_id}';
};

export type GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Unprocessable Entity
     */
    422: HttpOperatorValidationError;
};

export type GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetError = GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetErrors[keyof GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetErrors];

export type GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetResponses = {
    /**
     * Successful Response
     */
    200: ScenarioResultOutput;
};

export type GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetResponse = GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetResponses[keyof GetScenarioScenarioScenarioIdGetOperatorScenarioScenarioIdGetResponses];

export type SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostData = {
    body: Scenario;
    path: {
        slot: number;
    };
    query?: never;
    url: '/operator_mock/{slot}/scenario';
};

export type SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Unprocessable Entity
     */
    422: HttpOperatorValidationError;
};

export type SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostError = SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostErrors[keyof SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostErrors];

export type SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostResponse = SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostResponses[keyof SendScenarioOperatorMockPostWithSlotOperatorMockSlotScenarioPostResponses];

export type SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostData = {
    body: Scenario;
    path?: never;
    query?: never;
    url: '/operator_mock/scenario';
};

export type SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Unprocessable Entity
     */
    422: HttpOperatorValidationError;
};

export type SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostError = SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostErrors[keyof SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostErrors];

export type SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostResponse = SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostResponses[keyof SendScenarioOperatorMockPostWithoutSlotOperatorMockScenarioPostResponses];

export type GetMissionsMissionsGetData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        limit?: number;
    };
    url: '/missions/';
};

export type GetMissionsMissionsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMissionsMissionsGetError = GetMissionsMissionsGetErrors[keyof GetMissionsMissionsGetErrors];

export type GetMissionsMissionsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<MissionRead>;
};

export type GetMissionsMissionsGetResponse = GetMissionsMissionsGetResponses[keyof GetMissionsMissionsGetResponses];

export type CreateMissionMissionsPostData = {
    body: MissionCreate;
    path?: never;
    query?: never;
    url: '/missions/';
};

export type CreateMissionMissionsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateMissionMissionsPostError = CreateMissionMissionsPostErrors[keyof CreateMissionMissionsPostErrors];

export type CreateMissionMissionsPostResponses = {
    /**
     * Successful Response
     */
    200: MissionRead;
};

export type CreateMissionMissionsPostResponse = CreateMissionMissionsPostResponses[keyof CreateMissionMissionsPostResponses];

export type GetMissionsByTypeMissionsTypeMissionTypeGetData = {
    body?: never;
    path: {
        mission_type: string;
    };
    query?: never;
    url: '/missions/type/{mission_type}';
};

export type GetMissionsByTypeMissionsTypeMissionTypeGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMissionsByTypeMissionsTypeMissionTypeGetError = GetMissionsByTypeMissionsTypeMissionTypeGetErrors[keyof GetMissionsByTypeMissionsTypeMissionTypeGetErrors];

export type GetMissionsByTypeMissionsTypeMissionTypeGetResponses = {
    /**
     * Successful Response
     */
    200: Array<MissionRead>;
};

export type GetMissionsByTypeMissionsTypeMissionTypeGetResponse = GetMissionsByTypeMissionsTypeMissionTypeGetResponses[keyof GetMissionsByTypeMissionsTypeMissionTypeGetResponses];

export type DeleteMissionMissionsMissionIdDeleteData = {
    body?: never;
    path: {
        mission_id: string;
    };
    query?: never;
    url: '/missions/{mission_id}';
};

export type DeleteMissionMissionsMissionIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMissionMissionsMissionIdDeleteError = DeleteMissionMissionsMissionIdDeleteErrors[keyof DeleteMissionMissionsMissionIdDeleteErrors];

export type DeleteMissionMissionsMissionIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMissionMissionsMissionIdGetData = {
    body?: never;
    path: {
        mission_id: string;
    };
    query?: never;
    url: '/missions/{mission_id}';
};

export type GetMissionMissionsMissionIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMissionMissionsMissionIdGetError = GetMissionMissionsMissionIdGetErrors[keyof GetMissionMissionsMissionIdGetErrors];

export type GetMissionMissionsMissionIdGetResponses = {
    /**
     * Successful Response
     */
    200: MissionRead;
};

export type GetMissionMissionsMissionIdGetResponse = GetMissionMissionsMissionIdGetResponses[keyof GetMissionMissionsMissionIdGetResponses];

export type UpdateMissionMissionsMissionIdPutData = {
    body: MissionCreate;
    path: {
        mission_id: string;
    };
    query?: never;
    url: '/missions/{mission_id}';
};

export type UpdateMissionMissionsMissionIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateMissionMissionsMissionIdPutError = UpdateMissionMissionsMissionIdPutErrors[keyof UpdateMissionMissionsMissionIdPutErrors];

export type UpdateMissionMissionsMissionIdPutResponses = {
    /**
     * Successful Response
     */
    200: MissionRead;
};

export type UpdateMissionMissionsMissionIdPutResponse = UpdateMissionMissionsMissionIdPutResponses[keyof UpdateMissionMissionsMissionIdPutResponses];

export type PlanMissionMissionsPlanMissionMissionIdPostData = {
    body?: never;
    path: {
        mission_id: string;
    };
    query?: never;
    url: '/missions/plan_mission/{mission_id}';
};

export type PlanMissionMissionsPlanMissionMissionIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PlanMissionMissionsPlanMissionMissionIdPostError = PlanMissionMissionsPlanMissionMissionIdPostErrors[keyof PlanMissionMissionsPlanMissionMissionIdPostErrors];

export type PlanMissionMissionsPlanMissionMissionIdPostResponses = {
    /**
     * Successful Response
     */
    200: Array<ScenarioRead>;
};

export type PlanMissionMissionsPlanMissionMissionIdPostResponse = PlanMissionMissionsPlanMissionMissionIdPostResponses[keyof PlanMissionMissionsPlanMissionMissionIdPostResponses];

export type RunMissionMissionsRunMissionMissionIdPostData = {
    body?: never;
    path: {
        mission_id: string;
    };
    query?: never;
    url: '/missions/run_mission/{mission_id}';
};

export type RunMissionMissionsRunMissionMissionIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RunMissionMissionsRunMissionMissionIdPostError = RunMissionMissionsRunMissionMissionIdPostErrors[keyof RunMissionMissionsRunMissionMissionIdPostErrors];

export type RunMissionMissionsRunMissionMissionIdPostResponses = {
    /**
     * Successful Response
     */
    200: Array<ScenarioRead>;
};

export type RunMissionMissionsRunMissionMissionIdPostResponse = RunMissionMissionsRunMissionMissionIdPostResponses[keyof RunMissionMissionsRunMissionMissionIdPostResponses];

export type RetryMissionMissionsRetryMissionMissionIdPostData = {
    body?: never;
    path: {
        mission_id: string;
    };
    query?: never;
    url: '/missions/retry_mission/{mission_id}';
};

export type RetryMissionMissionsRetryMissionMissionIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RetryMissionMissionsRetryMissionMissionIdPostError = RetryMissionMissionsRetryMissionMissionIdPostErrors[keyof RetryMissionMissionsRetryMissionMissionIdPostErrors];

export type RetryMissionMissionsRetryMissionMissionIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CancelMissionMissionsCancelMissionMissionIdPostData = {
    body?: never;
    path: {
        mission_id: string;
    };
    query?: never;
    url: '/missions/cancel_mission/{mission_id}';
};

export type CancelMissionMissionsCancelMissionMissionIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CancelMissionMissionsCancelMissionMissionIdPostError = CancelMissionMissionsCancelMissionMissionIdPostErrors[keyof CancelMissionMissionsCancelMissionMissionIdPostErrors];

export type CancelMissionMissionsCancelMissionMissionIdPostResponses = {
    /**
     * Successful Response
     */
    200: MissionRead;
};

export type CancelMissionMissionsCancelMissionMissionIdPostResponse = CancelMissionMissionsCancelMissionMissionIdPostResponses[keyof CancelMissionMissionsCancelMissionMissionIdPostResponses];

export type CreateMission2MissionsCreateMission2PostData = {
    body: FluffMissionInput | AllocateProfilesGroupsMissionInput | EchoMissionInput | PuppetShowInput;
    path?: never;
    query?: never;
    url: '/missions/create_mission2/';
};

export type CreateMission2MissionsCreateMission2PostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateMission2MissionsCreateMission2PostError = CreateMission2MissionsCreateMission2PostErrors[keyof CreateMission2MissionsCreateMission2PostErrors];

export type CreateMission2MissionsCreateMission2PostResponses = {
    /**
     * Successful Response
     */
    200: MissionRead;
};

export type CreateMission2MissionsCreateMission2PostResponse = CreateMission2MissionsCreateMission2PostResponses[keyof CreateMission2MissionsCreateMission2PostResponses];

export type GetMissionsStatisticsMissionsStatisticsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * List of mission IDs
         */
        mission_ids?: Array<string>;
        /**
         * Mission type
         */
        mission_type?: string;
    };
    url: '/missions/statistics/';
};

export type GetMissionsStatisticsMissionsStatisticsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMissionsStatisticsMissionsStatisticsGetError = GetMissionsStatisticsMissionsStatisticsGetErrors[keyof GetMissionsStatisticsMissionsStatisticsGetErrors];

export type GetMissionsStatisticsMissionsStatisticsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type GetMissionsStatisticsMissionsStatisticsGetResponse = GetMissionsStatisticsMissionsStatisticsGetResponses[keyof GetMissionsStatisticsMissionsStatisticsGetResponses];

export type GetAllCategoriesCategoriesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/categories/';
};

export type GetAllCategoriesCategoriesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetAllCategoriesCategoriesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CategoryRead>;
};

export type GetAllCategoriesCategoriesGetResponse = GetAllCategoriesCategoriesGetResponses[keyof GetAllCategoriesCategoriesGetResponses];

export type CreateCategoryCategoriesPostData = {
    body: CategoryCreate;
    path?: never;
    query?: never;
    url: '/categories/';
};

export type CreateCategoryCategoriesPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCategoryCategoriesPostError = CreateCategoryCategoriesPostErrors[keyof CreateCategoryCategoriesPostErrors];

export type CreateCategoryCategoriesPostResponses = {
    /**
     * Successful Response
     */
    200: CategoryRead;
};

export type CreateCategoryCategoriesPostResponse = CreateCategoryCategoriesPostResponses[keyof CreateCategoryCategoriesPostResponses];

export type DeleteCategoryCategoriesCategoryIdDeleteData = {
    body?: never;
    path: {
        category_id: string;
    };
    query?: never;
    url: '/categories/{category_id}';
};

export type DeleteCategoryCategoriesCategoryIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCategoryCategoriesCategoryIdDeleteError = DeleteCategoryCategoriesCategoryIdDeleteErrors[keyof DeleteCategoryCategoriesCategoryIdDeleteErrors];

export type DeleteCategoryCategoriesCategoryIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCategoryCategoriesCategoryIdGetData = {
    body?: never;
    path: {
        category_id: string;
    };
    query?: never;
    url: '/categories/{category_id}';
};

export type GetCategoryCategoriesCategoryIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoryCategoriesCategoryIdGetError = GetCategoryCategoriesCategoryIdGetErrors[keyof GetCategoryCategoriesCategoryIdGetErrors];

export type GetCategoryCategoriesCategoryIdGetResponses = {
    /**
     * Successful Response
     */
    200: CategoryRead;
};

export type GetCategoryCategoriesCategoryIdGetResponse = GetCategoryCategoriesCategoryIdGetResponses[keyof GetCategoryCategoriesCategoryIdGetResponses];

export type UpdateCategoryCategoriesCategoryIdPutData = {
    body: CategoryCreate;
    path: {
        category_id: string;
    };
    query?: never;
    url: '/categories/{category_id}';
};

export type UpdateCategoryCategoriesCategoryIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCategoryCategoriesCategoryIdPutError = UpdateCategoryCategoriesCategoryIdPutErrors[keyof UpdateCategoryCategoriesCategoryIdPutErrors];

export type UpdateCategoryCategoriesCategoryIdPutResponses = {
    /**
     * Successful Response
     */
    200: CategoryRead;
};

export type UpdateCategoryCategoriesCategoryIdPutResponse = UpdateCategoryCategoriesCategoryIdPutResponses[keyof UpdateCategoryCategoriesCategoryIdPutResponses];

export type GetRootCategoryCategoriesRootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/categories/root/';
};

export type GetRootCategoryCategoriesRootGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetRootCategoryCategoriesRootGetResponses = {
    /**
     * Successful Response
     */
    200: CategoryRead;
};

export type GetRootCategoryCategoriesRootGetResponse = GetRootCategoryCategoriesRootGetResponses[keyof GetRootCategoryCategoriesRootGetResponses];

export type GetCategoryChildrensCategoriesCategoryIdChildrensGetData = {
    body?: never;
    path: {
        category_id: string;
    };
    query?: never;
    url: '/categories/{category_id}/childrens/';
};

export type GetCategoryChildrensCategoriesCategoryIdChildrensGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoryChildrensCategoriesCategoryIdChildrensGetError = GetCategoryChildrensCategoriesCategoryIdChildrensGetErrors[keyof GetCategoryChildrensCategoriesCategoryIdChildrensGetErrors];

export type GetCategoryChildrensCategoriesCategoryIdChildrensGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CategoryRead>;
};

export type GetCategoryChildrensCategoriesCategoryIdChildrensGetResponse = GetCategoryChildrensCategoriesCategoryIdChildrensGetResponses[keyof GetCategoryChildrensCategoriesCategoryIdChildrensGetResponses];

export type GetCategoryDescendantsCategoriesCategoryIdDescendantsGetData = {
    body?: never;
    path: {
        category_id: string;
    };
    query?: never;
    url: '/categories/{category_id}/descendants/';
};

export type GetCategoryDescendantsCategoriesCategoryIdDescendantsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoryDescendantsCategoriesCategoryIdDescendantsGetError = GetCategoryDescendantsCategoriesCategoryIdDescendantsGetErrors[keyof GetCategoryDescendantsCategoriesCategoryIdDescendantsGetErrors];

export type GetCategoryDescendantsCategoriesCategoryIdDescendantsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CategoryRead>;
};

export type GetCategoryDescendantsCategoriesCategoryIdDescendantsGetResponse = GetCategoryDescendantsCategoriesCategoryIdDescendantsGetResponses[keyof GetCategoryDescendantsCategoriesCategoryIdDescendantsGetResponses];

export type GetCategoryCharactersCategoriesCategoryIdCharactersGetData = {
    body?: never;
    path: {
        category_id: string;
    };
    query?: {
        include_descendants?: boolean;
    };
    url: '/categories/{category_id}/characters/';
};

export type GetCategoryCharactersCategoriesCategoryIdCharactersGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoryCharactersCategoriesCategoryIdCharactersGetError = GetCategoryCharactersCategoriesCategoryIdCharactersGetErrors[keyof GetCategoryCharactersCategoriesCategoryIdCharactersGetErrors];

export type GetCategoryCharactersCategoriesCategoryIdCharactersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CharacterRead>;
};

export type GetCategoryCharactersCategoriesCategoryIdCharactersGetResponse = GetCategoryCharactersCategoriesCategoryIdCharactersGetResponses[keyof GetCategoryCharactersCategoriesCategoryIdCharactersGetResponses];

export type RemoveCharacterFromCategoryCategoriesCategoryIdCharactersCharacterIdDeleteData = {
    body?: never;
    path: {
        category_id: string;
        character_id: string;
    };
    query?: never;
    url: '/categories/{category_id}/characters/{character_id}';
};

export type RemoveCharacterFromCategoryCategoriesCategoryIdCharactersCharacterIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveCharacterFromCategoryCategoriesCategoryIdCharactersCharacterIdDeleteError = RemoveCharacterFromCategoryCategoriesCategoryIdCharactersCharacterIdDeleteErrors[keyof RemoveCharacterFromCategoryCategoriesCategoryIdCharactersCharacterIdDeleteErrors];

export type RemoveCharacterFromCategoryCategoriesCategoryIdCharactersCharacterIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddCharacterToCategoryCategoriesCategoryIdCharactersCharacterIdPostData = {
    body?: never;
    path: {
        category_id: string;
        character_id: string;
    };
    query?: never;
    url: '/categories/{category_id}/characters/{character_id}';
};

export type AddCharacterToCategoryCategoriesCategoryIdCharactersCharacterIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddCharacterToCategoryCategoriesCategoryIdCharactersCharacterIdPostError = AddCharacterToCategoryCategoriesCategoryIdCharactersCharacterIdPostErrors[keyof AddCharacterToCategoryCategoriesCategoryIdCharactersCharacterIdPostErrors];

export type AddCharacterToCategoryCategoriesCategoryIdCharactersCharacterIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCategoryChatsCategoriesCategoryIdChatsGetData = {
    body?: never;
    path: {
        category_id: string;
    };
    query?: {
        include_descendants?: boolean;
    };
    url: '/categories/{category_id}/chats/';
};

export type GetCategoryChatsCategoriesCategoryIdChatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoryChatsCategoriesCategoryIdChatsGetError = GetCategoryChatsCategoriesCategoryIdChatsGetErrors[keyof GetCategoryChatsCategoriesCategoryIdChatsGetErrors];

export type GetCategoryChatsCategoriesCategoryIdChatsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ChatRead>;
};

export type GetCategoryChatsCategoriesCategoryIdChatsGetResponse = GetCategoryChatsCategoriesCategoryIdChatsGetResponses[keyof GetCategoryChatsCategoriesCategoryIdChatsGetResponses];

export type RemoveChatFromCategoryCategoriesCategoryIdChatsChatIdDeleteData = {
    body?: never;
    path: {
        category_id: string;
        chat_id: string;
    };
    query?: never;
    url: '/categories/{category_id}/chats/{chat_id}';
};

export type RemoveChatFromCategoryCategoriesCategoryIdChatsChatIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveChatFromCategoryCategoriesCategoryIdChatsChatIdDeleteError = RemoveChatFromCategoryCategoriesCategoryIdChatsChatIdDeleteErrors[keyof RemoveChatFromCategoryCategoriesCategoryIdChatsChatIdDeleteErrors];

export type RemoveChatFromCategoryCategoriesCategoryIdChatsChatIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AddChatToCategoryCategoriesCategoryIdChatsChatIdPostData = {
    body?: never;
    path: {
        category_id: string;
        chat_id: string;
    };
    query?: never;
    url: '/categories/{category_id}/chats/{chat_id}';
};

export type AddChatToCategoryCategoriesCategoryIdChatsChatIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddChatToCategoryCategoriesCategoryIdChatsChatIdPostError = AddChatToCategoryCategoriesCategoryIdChatsChatIdPostErrors[keyof AddChatToCategoryCategoriesCategoryIdChatsChatIdPostErrors];

export type AddChatToCategoryCategoriesCategoryIdChatsChatIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: (string & {});
};