// This file is auto-generated by @hey-api/openapi-ts

/**
 * Access permissions
 */
export type Access = {
    /**
     * View permission
     */
    view: number;
    /**
     * Update permission
     */
    update: number;
    /**
     * Delete permission
     */
    delete: number;
    /**
     * Share permission
     */
    share: number;
    /**
     * Usage permission
     */
    usage: number;
};

export type ActionErrorCode = 'chat_not_found' | 'general_error' | 'account_muted' | 'send_message_error' | 'message_deleted' | 'sending_attachment_error' | 'did_not_find_message_after_sending' | 'username_not_valid' | 'failed_to_download_attachment' | 'join_group_chat_type_user' | 'account_in_slow_mode' | 'timeout' | 'tweet_does_not_exist' | 'tweet_is_unavailable' | 'tweet_page_load_failed';

export type ActionPrefrences = {
    fail_fast?: boolean | null;
    timeout?: number | null;
};

export type ActionResponse = {
    id?: string;
    status: ActionStatus;
    type: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    content: SendMessageResponseContent | ReplyToMessageResponseContent | LeaveGroupResponseContent | JoinGroupResponseContent | ForwardMessageResponseContent | BehaviouralResponseContent | SendBulkMessagesResponseContent | ReadMessagesResponseContent | ResolvePhoneResponseContent | InteractWithTweetResponseContent | null;
    start_time: Date;
    end_time?: Date | null;
};

export type ActionStatus = {
    status_code: ActionStatusCode;
    error?: string | null;
    error_code?: ActionErrorCode | null;
};

export type ActionStatusCode = 'success' | 'failed' | 'cancelled' | 'fail_fast' | 'running' | 'pending';

export type ActivationRequest = {
    /**
     * The ID (GUID) of the profile to activate
     */
    profile_id: string;
    /**
     * Verify if the profile exists
     */
    verify_profile_exists?: boolean;
    /**
     * Should override the datadar if exists
     */
    should_override?: boolean;
    /**
     * Session data to override the local storage
     */
    session_data?: {
        [key: string]: unknown;
    } | null;
};

export type ActivationResponse = {
    /**
     * The status of the activation
     */
    status: ActivationStatus;
};

export type ActivationStatus = 'CHECKING_PROFILE' | 'STARTED' | 'ALREADY_LOGGED_IN' | 'WAITING_FOR_OTP' | 'ENTERING_OTP' | 'CHECKING_IF_WAITING_FOR_PASSWORD' | 'WAITING_FOR_PASSWORD' | 'ENTERING_PASSWORD' | 'WAITING_10_SECONDS' | 'VERIFYING_LOGIN' | 'LOGIN_VERIFICATION_FAILED' | 'SKIPPED' | 'FAILED' | 'SUCCESS';

export type AdspowerProfileData = {
    /**
     * Profile ID
     */
    profile_id: string;
    /**
     * Profile number
     */
    profile_no: string;
    /**
     * profile name
     */
    name?: string;
    /**
     * Profile created time, timestamp format
     */
    created_time?: string | null;
    /**
     * IP address
     */
    ip?: string | null;
    /**
     * IP country
     */
    ip_country?: string | null;
    /**
     * Platform password
     */
    password?: string | null;
    /**
     * Proxy ID
     */
    fbcc_proxy_acc_id?: string | null;
    /**
     * IP checker
     */
    ipchecker?: string | null;
    /**
     * Fake key
     */
    fakey?: string | null;
    /**
     * Group ID
     */
    group_id?: string | null;
    /**
     * Group name
     */
    group_name?: string | null;
    /**
     * Profile remark
     */
    remark?: string | null;
    /**
     * Last opened time, timestamp format
     */
    last_open_time?: string | null;
    /**
     * Platform username
     */
    username?: string | null;
    /**
     * Platform
     */
    platform?: string | null;
    /**
     * Extension category ID, '0' means 'use Team Extension'
     */
    category_id?: string | null;
    id: string;
    provider?: CharacterProvider;
};

export type AdspowerProfileIdentifier = {
    profile_id?: string | null;
    profile_no?: string | null;
    profile_name?: string | null;
};

export type AsyncWorkerState = 'init' | 'starting' | 'stopping' | 'stopped' | 'idle' | 'working' | 'paused';

export type Attachment = {
    url: string;
    name?: string | null;
    mime_type?: string | null;
};

/**
 * Audio configuration
 */
export type Audio = {
    /**
     * Audio mode
     */
    mode: string;
};

export type AuthRequest = {
    profile_id: string;
    otp?: string | null;
    password?: string | null;
};

export type AvatarProfileDataReadable = {
    id: string;
    data_dir_path?: string | null;
    proxy_config?: ProxyConfigReadable | null;
    user_agent?: string | null;
    phone_number?: string | null;
    name?: string | null;
    username?: string | null;
    bio?: string | null;
    provider?: CharacterProvider;
};

export type AvatarProfileDataWritable = {
    id: string;
    data_dir_path?: string | null;
    proxy_config?: ProxyConfigWritable | null;
    user_agent?: string | null;
    phone_number?: string | null;
    name?: string | null;
    username?: string | null;
    bio?: string | null;
    provider?: CharacterProvider;
};

export type BaseProfileData = {
    id: string;
    provider?: CharacterProvider;
};

export type BehaviouralAction = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
    args: BehaviouralArgs;
};

export type BehaviouralArgs = {
    wait_time?: number;
    sync_context?: boolean;
    get_chats?: boolean;
    sync_personal_details?: SyncPersonalDetailsArgs | null;
    disable_auto_download_media?: boolean;
    delete_all_active_sessions?: boolean;
    get_unread_messages?: boolean;
};

export type BehaviouralResponseContent = {
    current_context?: unknown | null;
    chats?: Array<GroupInfo | ChannelInfo> | null;
    personal_details_synced?: boolean;
    auto_download_media_disabled?: boolean;
    all_active_sessions_deleted?: boolean;
    unread_messages?: Array<ChatInfo> | null;
};

/**
 * CPU configuration
 */
export type Cpu = {
    /**
     * CPU mode (manual, auto)
     */
    mode: string;
    /**
     * CPU cores
     */
    value: number;
};

/**
 * Canvas fingerprinting configuration
 */
export type Canvas = {
    /**
     * Canvas mode (real, manual, etc.)
     */
    mode: string;
};

export type ChannelInfo = {
    id?: number | null;
    name?: string | null;
    phone_number?: string | null;
    title?: string | null;
    type?: ChatType;
    description?: string | null;
    read_inbox_max_id?: number | null;
    read_outbox_max_id?: number | null;
    unread_count?: number | null;
    unread_mentions_count?: number | null;
    unread_reactions_count?: number | null;
    subscribers?: number | null;
};

export type Character = {
    id?: string;
    /**
     * The provider of the character
     */
    provider?: CharacterProvider;
};

export type CharacterProvider = 'avatar' | 'dolphin' | 'adspower';

export type ChatInfo = {
    id?: number | null;
    name?: string | null;
    phone_number?: string | null;
    title?: string | null;
    type?: ChatType | null;
    description?: string | null;
    read_inbox_max_id?: number | null;
    read_outbox_max_id?: number | null;
    unread_count?: number | null;
    unread_mentions_count?: number | null;
    unread_reactions_count?: number | null;
};

export type ChatType = 'User' | 'Group' | 'Channel' | 'Bot' | 'Unknown';

/**
 * Client rectangle configuration
 */
export type ClientRect = {
    /**
     * Client rect mode
     */
    mode: string;
};

/**
 * Connection configuration
 */
export type Connection = {
    /**
     * Connection downlink speed
     */
    downlink: number;
    /**
     * Connection effective type
     */
    effectiveType: string;
    /**
     * Round trip time
     */
    rtt: number;
    /**
     * Save data flag
     */
    saveData: boolean;
};

/**
 * Device name configuration
 */
export type DeviceName = {
    /**
     * Device name mode
     */
    mode: string;
    /**
     * Device name value
     */
    value?: string | null;
};

/**
 * A subset view of DolphinBrowserProfile containing only essential fields for display purposes.
 * This is useful for listing profiles without loading all the detailed configuration data.
 */
export type DolphinBrowserProfileView = {
    /**
     * Profile ID
     */
    id: string;
    /**
     * Profile name
     */
    name: string;
    /**
     * Profile tags
     */
    tags?: Array<string>;
    /**
     * Profile status
     */
    status?: ProfileStatus | null;
};

export type DolphinProfileData = {
    id: string;
    /**
     * Team ID
     */
    teamId?: number | null;
    /**
     * User ID
     */
    userId: number;
    /**
     * Profile name
     */
    name: string;
    /**
     * Profile tags
     */
    tags?: Array<string>;
    /**
     * Platform (windows, mac, linux)
     */
    platform: string;
    /**
     * Browser type (anty, etc.)
     */
    browserType: string;
    /**
     * Main website
     */
    mainWebsite?: string;
    useragent: UserAgent;
    webrtc: WebRtc;
    /**
     * Canvas configuration
     */
    canvas: Canvas;
    webgl: WebGl;
    webglInfo: WebGlInfo;
    clientRect: ClientRect;
    notes: Notes;
    timezone: Timezone;
    locale: Locale;
    /**
     * Default tabs
     */
    tabs?: Array<string> | null;
    /**
     * Proxy ID
     */
    proxyId?: number | null;
    /**
     * Proxy configuration
     */
    proxy?: Proxy | null;
    ports: Ports;
    access: Access;
    /**
     * Profile status
     */
    status?: ProfileStatus | null;
    /**
     * Running status (0=stopped, 1=running)
     */
    running?: number;
    /**
     * Last running time
     */
    lastRunningTime?: string | null;
    /**
     * Last run by user ID
     */
    lastRunnedByUserId?: number | null;
    /**
     * Last run UUID
     */
    lastRunUuid?: string | null;
    /**
     * Last start time
     */
    lastStartTime?: string | null;
    geolocation: Geolocation;
    cpu: Cpu;
    memory: Memory;
    /**
     * Platform name
     */
    platformName: string;
    /**
     * CPU architecture
     */
    cpuArchitecture: string;
    /**
     * OS version
     */
    osVersion: string | number;
    /**
     * Platform version
     */
    platformVersion: string;
    screen: Screen;
    /**
     * Screen width
     */
    screenWidth?: string | null;
    /**
     * Screen height
     */
    screenHeight?: string | null;
    /**
     * Connection configuration
     */
    connection?: Connection | null;
    /**
     * Connection downlink
     */
    connectionDownlink?: number | null;
    /**
     * Connection effective type
     */
    connectionEffectiveType?: string | null;
    /**
     * Connection RTT
     */
    connectionRtt?: number | null;
    /**
     * Connection save data
     */
    connectionSaveData?: number | null;
    /**
     * Vendor sub
     */
    vendorSub?: string;
    /**
     * Product sub
     */
    productSub: string | number;
    /**
     * Vendor
     */
    vendor: string;
    /**
     * Product
     */
    product: string;
    /**
     * Do not track flag
     */
    doNotTrack?: boolean;
    /**
     * Browser arguments
     */
    args?: Array<string>;
    /**
     * App code name
     */
    appCodeName: string;
    /**
     * User fields
     */
    userFields?: string | null;
    /**
     * Login
     */
    login?: string;
    /**
     * Password
     */
    password?: string;
    /**
     * Storage path
     */
    storagePath?: string;
    /**
     * Data directory hash
     */
    datadirHash?: string | null;
    /**
     * Cookies hash
     */
    cookiesHash?: string | null;
    /**
     * Browser extensions
     */
    extensions?: Array<Extension>;
    /**
     * Bookmarks
     */
    bookmarks?: Array<string>;
    /**
     * Homepages
     */
    homepages?: Array<Homepage>;
    /**
     * Extensions new naming
     */
    extensionsNewNaming: boolean | number;
    /**
     * Archived flag
     */
    archived?: number | null;
    /**
     * Transfer flag
     */
    transfer?: number | null;
    /**
     * WebGPU configuration
     */
    webgpu?: WebGpu | null;
    /**
     * Recover count
     */
    recoverCount?: string | null;
    /**
     * Cloud sync disabled
     */
    cloudSyncDisabled?: string | null;
    /**
     * Cloud sync disabled on machine ID
     */
    cloudSyncDisabledOnMachineId?: string | null;
    /**
     * Sorting name
     */
    sortingName?: string | null;
    /**
     * Added sorting name
     */
    addedSortingName?: number | null;
    /**
     * Sorting name (alternative)
     */
    sorting_name?: string | null;
    /**
     * MAC address configuration
     */
    macAddress?: MacAddress | null;
    /**
     * Device name configuration
     */
    deviceName?: DeviceName | null;
    /**
     * Fonts mode
     */
    fontsMode?: string | null;
    /**
     * Is hidden profile name
     */
    isHiddenProfileName?: number | null;
    /**
     * Enable arg is chrome icon
     */
    enableArgIsChromeIcon?: string | null;
    /**
     * Disable load web camera and cookies
     */
    disableLoadWebCameraAndCookies?: string | null;
    /**
     * Audio configuration
     */
    audio?: Audio | null;
    /**
     * Pinned flag
     */
    pinned?: boolean | null;
    /**
     * Folder
     */
    folder?: string | null;
    /**
     * Require password
     */
    requirePassword?: number | null;
    /**
     * Transfer to email
     */
    transferToEmail?: string | null;
    /**
     * Transfer status
     */
    transferStatus?: string | null;
    /**
     * Transfer handle date
     */
    transferHandleDate?: string | null;
    /**
     * Transfer with proxy
     */
    transferWithProxy?: string | null;
    /**
     * Created at timestamp
     */
    created_at?: string | null;
    /**
     * Updated at timestamp
     */
    updated_at?: string | null;
    /**
     * Deleted at timestamp
     */
    deleted_at?: string | null;
    /**
     * Total session duration
     */
    totalSessionDuration?: number | null;
    /**
     * User agent full version
     */
    uaFullVersion?: string | null;
    automation?: ProfileAutomationData | null;
    provider?: CharacterProvider;
};

/**
 * Browser extension
 */
export type Extension = {
    /**
     * Extension URL
     */
    url: string;
    /**
     * Extension type
     */
    type: string;
    /**
     * Extension hash
     */
    hash: string;
};

export type ForwardMessageAction = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
    args: ForwardMessageArgs;
};

export type ForwardMessageArgs = {
    /**
     * The chat to forward from, if not provided, the message link will be used
     */
    from_chat?: ChatInfo | null;
    /**
     * The message to forward, if not provided, the message link will be used
     */
    message_info?: MessageInfo | null;
    target_chat: ChatInfo;
    message?: InputMessage;
    /**
     * The link to the message to forward, if not provided, the from chat and message info will be used
     */
    message_link?: string | null;
};

export type ForwardMessageResponseContent = {
    message_info: MessageInfo;
};

/**
 * Geolocation configuration
 */
export type Geolocation = {
    /**
     * Geolocation mode (auto, manual)
     */
    mode: string;
    /**
     * Latitude
     */
    latitude?: number | null;
    /**
     * Longitude
     */
    longitude?: number | null;
    /**
     * Accuracy
     */
    accuracy?: number | null;
};

export type GroupInfo = {
    id?: number | null;
    name?: string | null;
    phone_number?: string | null;
    title?: string | null;
    type?: ChatType;
    description?: string | null;
    read_inbox_max_id?: number | null;
    read_outbox_max_id?: number | null;
    unread_count?: number | null;
    unread_mentions_count?: number | null;
    unread_reactions_count?: number | null;
    members?: number | null;
    online?: number | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Browser homepage
 */
export type Homepage = {
    /**
     * Homepage ID
     */
    id?: number | null;
    /**
     * Homepage URL
     */
    url?: string | null;
    /**
     * Homepage name
     */
    name?: string | null;
    /**
     * Homepage order
     */
    order?: number | null;
    /**
     * Homepage pivot relationship
     */
    pivot?: HomepagePivot | null;
};

/**
 * Homepage pivot relationship
 */
export type HomepagePivot = {
    /**
     * Profile ID
     */
    profileId: number;
    /**
     * Homepage ID
     */
    homepageId: number;
};

export type InputMessage = {
    text?: string | null;
    attachments?: Array<Attachment>;
};

export type InteractWithTweetAction = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
    args: InteractWithTweetArgs;
};

export type InteractWithTweetArgs = {
    url: string;
    interaction: TweetInteraction;
};

export type InteractWithTweetResponseContent = {
    interaction_result: TweetInteractionResult;
};

export type JoinGroupAction = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
    args: JoinGroupArgs;
};

export type JoinGroupArgs = {
    chat?: ChatInfo | null;
    join_discussion_group_if_availble?: boolean;
    invite_link?: string | null;
};

export type JoinGroupResponseContent = {
    chat_info: ChannelInfo | GroupInfo | null;
    discussion_group_chat_info: ChannelInfo | GroupInfo | null;
};

export type LeaveGroupAction = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
    args: LeaveGroupArgs;
};

export type LeaveGroupArgs = {
    chat: ChatInfo;
};

export type LeaveGroupResponseContent = {
    [key: string]: unknown;
};

/**
 * Locale configuration
 */
export type Locale = {
    /**
     * Locale mode (auto, manual)
     */
    mode: string;
    /**
     * Locale value
     */
    value?: string | null;
};

/**
 * MAC address configuration
 */
export type MacAddress = {
    /**
     * MAC address mode
     */
    mode: string;
    /**
     * MAC address value
     */
    value?: string | null;
};

/**
 * Memory configuration
 */
export type Memory = {
    /**
     * Memory mode (manual, auto)
     */
    mode: string;
    /**
     * Memory in GB
     */
    value: number;
};

export type MessageInfo = {
    timestamp: string;
    peer_id?: string | null;
    from_id?: string | null;
    text_hash?: string | null;
    message_id?: string | null;
    viewer_id?: string | null;
};

/**
 * Profile notes
 */
export type Notes = {
    /**
     * Note content
     */
    content?: string | null;
    /**
     * Note color
     */
    color?: string;
    /**
     * Note style
     */
    style?: string;
    /**
     * Note icon
     */
    icon?: string | null;
};

/**
 * Port configuration
 */
export type Ports = {
    /**
     * Port mode (protect, etc.)
     */
    mode: string;
    /**
     * Blacklisted ports
     */
    blacklist: string;
};

export type Prefrences = {
    actions_timeout?: number | null;
    action_interval?: number | null;
    close_browser_when_finished?: boolean | null;
    should_login_telegram?: boolean | null;
    verify_proxy_working?: boolean | null;
    fail_fast?: boolean | null;
    hide_content?: boolean | null;
};

/**
 * Represents the automation data of a profile.
 * It contains:
 * - The port of the automation
 * - The websocket endpoint of the automation
 */
export type ProfileAutomationData = {
    /**
     * The port of the automation
     */
    port: number;
    /**
     * The websocket endpoint of the automation
     */
    wsEndpoint?: string | null;
};

/**
 * Resembles the status of a profile. (based on Dolphin)
 * It contains:
 * - Status ID
 * - Status name
 * - Status color
 */
export type ProfileStatus = {
    id?: number;
    name?: string;
    color?: string;
};

export type ProfileWorkerViewReadable = {
    id?: string;
    state: AsyncWorkerState;
    current_scenario: ScenarioReadable | null;
    current_scenario_result: ScenarioResult | null;
    pending_actions: number;
    browser_port: number | null;
};

export type ProfileWorkerViewWritable = {
    id?: string;
    state: AsyncWorkerState;
    current_scenario: ScenarioWritable | null;
    current_scenario_result: ScenarioResult | null;
    pending_actions: number;
    browser_port: number | null;
};

/**
 * Proxy configuration
 */
export type Proxy = {
    /**
     * Proxy ID
     */
    id: number;
    /**
     * Proxy name
     */
    name?: string | null;
    /**
     * Proxy type (http, socks, etc.)
     */
    type?: string | null;
    /**
     * Proxy host
     */
    host?: string | null;
    /**
     * Proxy port
     */
    port?: string | null;
    /**
     * Proxy login
     */
    login?: string | null;
    /**
     * Proxy password
     */
    password?: string | null;
    /**
     * Saved by user flag
     */
    savedByUser?: number | null;
    /**
     * Crypto key ID
     */
    cryptoKeyId?: number | null;
    /**
     * Change IP URL
     */
    changeIpUrl?: string | null;
    /**
     * Proxy provider
     */
    provider?: string | null;
    /**
     * Last proxy check
     */
    lastCheck?: {
        [key: string]: unknown;
    } | null;
};

export type ProxyConfigReadable = {
    fqdn?: string | null;
    ip_address?: string | null;
    port: number;
    status: string;
    id: string;
};

export type ProxyConfigWritable = {
    fqdn?: string | null;
    ip_address?: string | null;
    port: number;
    username: string;
    password: string;
    status: string;
    id: string;
};

export type ReadMessagesAction = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
    args: ReadMessagesArgs;
};

export type ReadMessagesArgs = {
    chat: ChatInfo;
    amount_messages?: number | null;
    read_all_in_end?: boolean;
};

export type ReadMessagesResponseContent = {
    messages_read: number;
};

export type ReplyToMessageAction = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
    args: ReplyToMessageArgs;
};

export type ReplyToMessageArgs = {
    /**
     * The chat to reply to, if not provided, the message link will be used
     */
    chat?: ChatInfo | null;
    /**
     * The message to reply to, if not provided, the message link will be used
     */
    message_info?: MessageInfo | null;
    input_message_content: InputMessage;
    /**
     * The link to the message to reply to, if not provided, the chat and message info will be used
     */
    message_link?: string | null;
};

export type ReplyToMessageResponseContent = {
    message_info: MessageInfo;
};

export type ResolvePhoneActionReadable = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
};

export type ResolvePhoneActionWritable = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
    args: ResolvePhoneArgs;
};

export type ResolvePhoneArgs = {
    phone_number: string;
};

export type ResolvePhoneResponseContent = {
    user_info?: UserInfo | null;
    error?: string | null;
};

export type ScenarioReadable = {
    id?: string;
    profile: Character;
    prefrences?: Prefrences;
    actions: Array<JoinGroupAction | LeaveGroupAction | ReplyToMessageAction | SendMessageAction | ForwardMessageAction | BehaviouralAction | SendBulkMessagesAction | ReadMessagesAction | ResolvePhoneActionReadable | InteractWithTweetAction>;
};

export type ScenarioWritable = {
    id?: string;
    profile: Character;
    prefrences?: Prefrences;
    actions: Array<JoinGroupAction | LeaveGroupAction | ReplyToMessageAction | SendMessageAction | ForwardMessageAction | BehaviouralAction | SendBulkMessagesAction | ReadMessagesAction | ResolvePhoneActionWritable | InteractWithTweetAction>;
};

export type ScenarioInfo = {
    start_time?: Date;
    end_time?: Date | null;
};

export type ScenarioResult = {
    id?: string;
    status?: ScenarioStatus;
    scenario_info?: ScenarioInfo;
    actions_responses?: Array<ActionResponse>;
};

export type ScenarioResultStatus = 'success' | 'failed' | 'pending' | 'finished' | 'proxy_error' | 'browser_error' | 'telegram_error' | 'profile_not_logged_in' | 'profile_already_running' | 'profile_failed_to_start' | 'profile_startup_timeout' | 'profile_proxy_not_configured';

export type ScenarioStatus = {
    status_code?: ScenarioResultStatus;
    error?: string | null;
};

export type ScenarioWithResultReadable = {
    scenario: ScenarioReadable;
    result?: ScenarioResult;
};

export type ScenarioWithResultWritable = {
    scenario: ScenarioWritable;
    result?: ScenarioResult;
};

/**
 * Screen configuration
 */
export type Screen = {
    /**
     * Screen width
     */
    width?: number | null;
    /**
     * Screen height
     */
    height?: number | null;
    /**
     * Screen mode (real, manual)
     */
    mode: string;
    /**
     * Screen resolution
     */
    resolution?: string | null;
};

export type SendBulkMessagesAction = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
    args: SendBulkMessagesArgs;
};

export type SendBulkMessagesArgs = {
    chat: ChatInfo;
    messages: Array<string>;
    interval?: number;
};

export type SendBulkMessagesResponseContent = {
    message_infos: Array<MessageInfo>;
};

export type SendMessageAction = {
    id?: string;
    platform?: 'telegram' | 'twitter';
    type?: 'send_message' | 'send_bulk_messages' | 'join_group' | 'leave_group' | 'reply_to_message' | 'forward_message' | 'behavioural' | 'read_messages' | 'resolve_phone' | 'interact_with_tweet';
    prefrences?: ActionPrefrences;
    args: SendMessageArgs;
};

export type SendMessageArgs = {
    chat: ChatInfo;
    input_message_content: InputMessage;
};

export type SendMessageResponseContent = {
    message_info: MessageInfo;
};

export type SubmitCredentialsResponse = {
    /**
     * Whether the credentials were submitted successfully
     */
    success: boolean;
};

export type SyncPersonalDetailsArgs = {
    first_name?: string;
    last_name?: string;
    bio?: string;
    username?: string;
};

export type TgAuthCredentialsResponse = {
    otp?: string | null;
    password?: string | null;
};

/**
 * Timezone configuration
 */
export type Timezone = {
    /**
     * Timezone mode (auto, manual)
     */
    mode: string;
    /**
     * Timezone value
     */
    value?: string | null;
};

export type TweetContent = {
    text: string;
    media?: Array<string> | null;
};

export type TweetInteraction = {
    like?: boolean;
    retweet?: boolean;
    bookmark?: boolean;
    reply?: TweetContent | null;
    quote?: TweetContent | null;
};

export type TweetInteractionResult = {
    like?: TweetInteractionStatus | null;
    retweet?: TweetInteractionStatus | null;
    bookmark?: TweetInteractionStatus | null;
    reply?: TweetInteractionStatus | null;
    reply_tweet_id?: number | null;
    quote?: TweetInteractionStatus | null;
    quote_tweet_id?: number | null;
};

export type TweetInteractionStatus = 'success' | 'failed' | 'already_done';

/**
 * User agent configuration
 */
export type UserAgent = {
    /**
     * User agent mode (manual, auto, etc.)
     */
    mode: string;
    /**
     * User agent string
     */
    value: string;
};

export type UserInfo = {
    id?: number | null;
    name?: string | null;
    phone_number?: string | null;
    title?: string | null;
    type?: ChatType;
    description?: string | null;
    read_inbox_max_id?: number | null;
    read_outbox_max_id?: number | null;
    unread_count?: number | null;
    unread_mentions_count?: number | null;
    unread_reactions_count?: number | null;
    subtitle?: string | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

/**
 * WebGL configuration
 */
export type WebGl = {
    /**
     * WebGL mode (real, manual, etc.)
     */
    mode: string;
};

/**
 * WebGL information
 */
export type WebGlInfo = {
    /**
     * WebGL info mode
     */
    mode: string;
    /**
     * WebGL vendor
     */
    vendor?: string | null;
    /**
     * WebGL renderer
     */
    renderer?: string | null;
    /**
     * WebGL2 maximum capabilities
     */
    webgl2Maximum?: string | null;
};

/**
 * WebGPU configuration
 */
export type WebGpu = {
    /**
     * WebGPU mode
     */
    mode: string;
    /**
     * WebGPU value
     */
    value: string;
};

/**
 * WebRTC configuration
 */
export type WebRtc = {
    /**
     * WebRTC mode (altered, real, etc.)
     */
    mode: string;
    /**
     * IP address for WebRTC
     */
    ipAddress?: string | null;
};

export type SubmitScenarioAsyncScenarioPostData = {
    body: ScenarioWritable;
    path?: never;
    query?: never;
    url: '/scenario';
};

export type SubmitScenarioAsyncScenarioPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SubmitScenarioAsyncScenarioPostError = SubmitScenarioAsyncScenarioPostErrors[keyof SubmitScenarioAsyncScenarioPostErrors];

export type SubmitScenarioAsyncScenarioPostResponses = {
    /**
     * Successful Response
     */
    202: ScenarioReadable;
};

export type SubmitScenarioAsyncScenarioPostResponse = SubmitScenarioAsyncScenarioPostResponses[keyof SubmitScenarioAsyncScenarioPostResponses];

export type SubmitScenarioSyncScenarioSyncSubmitPostData = {
    body: ScenarioWritable;
    path?: never;
    query?: never;
    url: '/scenario/syncSubmit';
};

export type SubmitScenarioSyncScenarioSyncSubmitPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SubmitScenarioSyncScenarioSyncSubmitPostError = SubmitScenarioSyncScenarioSyncSubmitPostErrors[keyof SubmitScenarioSyncScenarioSyncSubmitPostErrors];

export type SubmitScenarioSyncScenarioSyncSubmitPostResponses = {
    /**
     * Successful Response
     */
    200: ScenarioReadable;
};

export type SubmitScenarioSyncScenarioSyncSubmitPostResponse = SubmitScenarioSyncScenarioSyncSubmitPostResponses[keyof SubmitScenarioSyncScenarioSyncSubmitPostResponses];

export type GetScenariosScenarioScenarioGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/scenario/scenario';
};

export type GetScenariosScenarioScenarioGetResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: ScenarioWithResultReadable;
    };
};

export type GetScenariosScenarioScenarioGetResponse = GetScenariosScenarioScenarioGetResponses[keyof GetScenariosScenarioScenarioGetResponses];

export type GetScenarioByIdScenarioScenarioScenarioIdGetData = {
    body?: never;
    path: {
        scenario_id: string;
    };
    query?: never;
    url: '/scenario/scenario/{scenario_id}';
};

export type GetScenarioByIdScenarioScenarioScenarioIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetScenarioByIdScenarioScenarioScenarioIdGetError = GetScenarioByIdScenarioScenarioScenarioIdGetErrors[keyof GetScenarioByIdScenarioScenarioScenarioIdGetErrors];

export type GetScenarioByIdScenarioScenarioScenarioIdGetResponses = {
    /**
     * Successful Response
     */
    200: ScenarioWithResultReadable | null;
};

export type GetScenarioByIdScenarioScenarioScenarioIdGetResponse = GetScenarioByIdScenarioScenarioScenarioIdGetResponses[keyof GetScenarioByIdScenarioScenarioScenarioIdGetResponses];

export type GetAllCharactersCharactersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/characters';
};

export type GetAllCharactersCharactersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ProfileWorkerViewReadable>;
};

export type GetAllCharactersCharactersGetResponse = GetAllCharactersCharactersGetResponses[keyof GetAllCharactersCharactersGetResponses];

export type GetAllProfilesCharactersAllGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/characters/all';
};

export type GetAllProfilesCharactersAllGetResponses = {
    /**
     * Successful Response
     */
    200: Array<BaseProfileData | AvatarProfileDataReadable | DolphinProfileData | AdspowerProfileData>;
};

export type GetAllProfilesCharactersAllGetResponse = GetAllProfilesCharactersAllGetResponses[keyof GetAllProfilesCharactersAllGetResponses];

export type GetCharacterCharactersCharacterIdGetData = {
    body?: never;
    path: {
        character_id: string;
    };
    query?: never;
    url: '/characters/{character_id}';
};

export type GetCharacterCharactersCharacterIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCharacterCharactersCharacterIdGetError = GetCharacterCharactersCharacterIdGetErrors[keyof GetCharacterCharactersCharacterIdGetErrors];

export type GetCharacterCharactersCharacterIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type StopProfileCharactersCharacterIdStopPostData = {
    body?: never;
    path: {
        character_id: string;
    };
    query?: never;
    url: '/characters/{character_id}/stop';
};

export type StopProfileCharactersCharacterIdStopPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StopProfileCharactersCharacterIdStopPostError = StopProfileCharactersCharacterIdStopPostErrors[keyof StopProfileCharactersCharacterIdStopPostErrors];

export type StopProfileCharactersCharacterIdStopPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type StopAllProfilesCharactersStopPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/characters/stop';
};

export type StopAllProfilesCharactersStopPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type IsProfileRegisteredAuthIsProfileRegisteredGetData = {
    body?: never;
    path?: never;
    query: {
        profile_id: string;
    };
    url: '/auth/is-profile-registered';
};

export type IsProfileRegisteredAuthIsProfileRegisteredGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type IsProfileRegisteredAuthIsProfileRegisteredGetError = IsProfileRegisteredAuthIsProfileRegisteredGetErrors[keyof IsProfileRegisteredAuthIsProfileRegisteredGetErrors];

export type IsProfileRegisteredAuthIsProfileRegisteredGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CredentialsAuthCredentialsGetData = {
    body?: never;
    path?: never;
    query: {
        profile_id: string;
    };
    url: '/auth/credentials';
};

export type CredentialsAuthCredentialsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CredentialsAuthCredentialsGetError = CredentialsAuthCredentialsGetErrors[keyof CredentialsAuthCredentialsGetErrors];

export type CredentialsAuthCredentialsGetResponses = {
    /**
     * Successful Response
     */
    200: TgAuthCredentialsResponse;
};

export type CredentialsAuthCredentialsGetResponse = CredentialsAuthCredentialsGetResponses[keyof CredentialsAuthCredentialsGetResponses];

export type SubmitCredentialsAuthPostData = {
    body: AuthRequest;
    path?: never;
    query?: {
        verify_profile_exists?: boolean;
        should_override?: boolean;
    };
    url: '/auth';
};

export type SubmitCredentialsAuthPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SubmitCredentialsAuthPostError = SubmitCredentialsAuthPostErrors[keyof SubmitCredentialsAuthPostErrors];

export type SubmitCredentialsAuthPostResponses = {
    /**
     * Successful Response
     */
    200: SubmitCredentialsResponse;
};

export type SubmitCredentialsAuthPostResponse = SubmitCredentialsAuthPostResponses[keyof SubmitCredentialsAuthPostResponses];

export type ActivateActivationActivatePostData = {
    body: ActivationRequest;
    path?: never;
    query?: never;
    url: '/activation/activate';
};

export type ActivateActivationActivatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ActivateActivationActivatePostError = ActivateActivationActivatePostErrors[keyof ActivateActivationActivatePostErrors];

export type ActivateActivationActivatePostResponses = {
    /**
     * Successful Response
     */
    200: ActivationResponse;
};

export type ActivateActivationActivatePostResponse = ActivateActivationActivatePostResponses[keyof ActivateActivationActivatePostResponses];

export type ActivateWithSessionDataActivationActivateWithSessionDataPostData = {
    body: ActivationRequest;
    path?: never;
    query?: never;
    url: '/activation/activate_with_session_data';
};

export type ActivateWithSessionDataActivationActivateWithSessionDataPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ActivateWithSessionDataActivationActivateWithSessionDataPostError = ActivateWithSessionDataActivationActivateWithSessionDataPostErrors[keyof ActivateWithSessionDataActivationActivateWithSessionDataPostErrors];

export type ActivateWithSessionDataActivationActivateWithSessionDataPostResponses = {
    /**
     * Successful Response
     */
    200: ActivationResponse;
};

export type ActivateWithSessionDataActivationActivateWithSessionDataPostResponse = ActivateWithSessionDataActivationActivateWithSessionDataPostResponses[keyof ActivateWithSessionDataActivationActivateWithSessionDataPostResponses];

export type GetStatusActivationStatusGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The ID (GUID) of the profile to get the status of
         */
        profile_id: string;
    };
    url: '/activation/status';
};

export type GetStatusActivationStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetStatusActivationStatusGetError = GetStatusActivationStatusGetErrors[keyof GetStatusActivationStatusGetErrors];

export type GetStatusActivationStatusGetResponses = {
    /**
     * Successful Response
     */
    200: ActivationResponse;
};

export type GetStatusActivationStatusGetResponse = GetStatusActivationStatusGetResponses[keyof GetStatusActivationStatusGetResponses];

export type GetAdspowerProfilesAdspowerProfilesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/adspower/profiles';
};

export type GetAdspowerProfilesAdspowerProfilesGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAdspowerProfileAdspowerProfilesProfileIdGetData = {
    body?: never;
    path: {
        profile_id: string;
    };
    query?: never;
    url: '/adspower/profiles/{profile_id}';
};

export type GetAdspowerProfileAdspowerProfilesProfileIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAdspowerProfileAdspowerProfilesProfileIdGetError = GetAdspowerProfileAdspowerProfilesProfileIdGetErrors[keyof GetAdspowerProfileAdspowerProfilesProfileIdGetErrors];

export type GetAdspowerProfileAdspowerProfilesProfileIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type StartAdspowerProfileAdspowerProfilesProfileIdStartPostData = {
    body?: never;
    path: {
        profile_id: string;
    };
    query?: never;
    url: '/adspower/profiles/{profile_id}/start';
};

export type StartAdspowerProfileAdspowerProfilesProfileIdStartPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StartAdspowerProfileAdspowerProfilesProfileIdStartPostError = StartAdspowerProfileAdspowerProfilesProfileIdStartPostErrors[keyof StartAdspowerProfileAdspowerProfilesProfileIdStartPostErrors];

export type StartAdspowerProfileAdspowerProfilesProfileIdStartPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type StopAdspowerProfileAdspowerProfilesProfileIdStopPostData = {
    body?: never;
    path: {
        profile_id: string;
    };
    query?: never;
    url: '/adspower/profiles/{profile_id}/stop';
};

export type StopAdspowerProfileAdspowerProfilesProfileIdStopPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StopAdspowerProfileAdspowerProfilesProfileIdStopPostError = StopAdspowerProfileAdspowerProfilesProfileIdStopPostErrors[keyof StopAdspowerProfileAdspowerProfilesProfileIdStopPostErrors];

export type StopAdspowerProfileAdspowerProfilesProfileIdStopPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ScrapeAdspowerProfileAdspowerProfilesProfileIdScrapePostData = {
    body: AdspowerProfileIdentifier;
    path?: never;
    query?: {
        days_ago?: number;
        until_tweet_id?: number | null;
    };
    url: '/adspower/profiles/{profile_id}/scrape';
};

export type ScrapeAdspowerProfileAdspowerProfilesProfileIdScrapePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ScrapeAdspowerProfileAdspowerProfilesProfileIdScrapePostError = ScrapeAdspowerProfileAdspowerProfilesProfileIdScrapePostErrors[keyof ScrapeAdspowerProfileAdspowerProfilesProfileIdScrapePostErrors];

export type ScrapeAdspowerProfileAdspowerProfilesProfileIdScrapePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ScrapeOneByOneAdspowerProfilesScrapeOneByOnePostData = {
    body?: never;
    path?: never;
    query?: {
        days_ago?: number;
    };
    url: '/adspower/profiles/scrape/one_by_one';
};

export type ScrapeOneByOneAdspowerProfilesScrapeOneByOnePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ScrapeOneByOneAdspowerProfilesScrapeOneByOnePostError = ScrapeOneByOneAdspowerProfilesScrapeOneByOnePostErrors[keyof ScrapeOneByOneAdspowerProfilesScrapeOneByOnePostErrors];

export type ScrapeOneByOneAdspowerProfilesScrapeOneByOnePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ExportScrapeDataCsvAdspowerScrapeExportCsvGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/adspower/scrape/export/csv';
};

export type ExportScrapeDataCsvAdspowerScrapeExportCsvGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAdspowerProfileScrapeAdspowerScrapeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/adspower/scrape';
};

export type GetAdspowerProfileScrapeAdspowerScrapeGetResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type GetAdspowerProfileScrapeAdspowerScrapeGetResponse = GetAdspowerProfileScrapeAdspowerScrapeGetResponses[keyof GetAdspowerProfileScrapeAdspowerScrapeGetResponses];

export type GetAllStatusesDolphinStatusesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/dolphin/statuses';
};

export type GetAllStatusesDolphinStatusesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ProfileStatus>;
};

export type GetAllStatusesDolphinStatusesGetResponse = GetAllStatusesDolphinStatusesGetResponses[keyof GetAllStatusesDolphinStatusesGetResponses];

export type GetAllProfilesDolphinProfilesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/dolphin/profiles';
};

export type GetAllProfilesDolphinProfilesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<DolphinBrowserProfileView>;
};

export type GetAllProfilesDolphinProfilesGetResponse = GetAllProfilesDolphinProfilesGetResponses[keyof GetAllProfilesDolphinProfilesGetResponses];

export type ClientOptions = {
    baseUrl: (string & {});
};