// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zActionPrefrences = z.object({
    fail_fast: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    timeout: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zActionStatusCode = z.enum([
    'success',
    'failed',
    'cancelled',
    'fail_fast',
    'running',
    'pending'
]);

export const zActionStatus = z.object({
    status_code: zActionStatusCode,
    error: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zMessageInfo = z.object({
    timestamp: z.string(),
    peer_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    from_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    text_hash: z.union([
        z.string(),
        z.null()
    ]).optional(),
    message_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    viewer_id: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zSendMessageResponseContent = z.object({
    message_info: zMessageInfo
});

export const zReplyToMessageResponseContent = z.object({
    message_info: zMessageInfo
});

export const zLeaveGroupResponseContent = z.object({});

export const zChatType = z.enum([
    'User',
    'Group',
    'Channel',
    'Bot',
    'Unknown'
]);

export const zChannelInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: zChatType.optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    subscribers: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zGroupInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: zChatType.optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    members: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    online: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zJoinGroupResponseContent = z.object({
    chat_info: z.union([
        zChannelInfo,
        zGroupInfo,
        z.null()
    ]),
    discussion_group_chat_info: z.union([
        zChannelInfo,
        zGroupInfo,
        z.null()
    ])
});

export const zForwardMessageResponseContent = z.object({
    message_info: zMessageInfo
});

export const zBehaviouralResponseContent = z.object({
    current_context: z.union([
        z.unknown(),
        z.null()
    ]).optional(),
    chats: z.union([
        z.array(z.unknown()),
        z.null()
    ]).optional(),
    personal_details_synced: z.boolean().optional().default(false),
    auto_download_media_disabled: z.boolean().optional().default(false),
    all_active_sessions_deleted: z.boolean().optional().default(false)
});

export const zSendBulkMessagesResponseContent = z.object({
    message_infos: z.array(zMessageInfo)
});

export const zActionResponse = z.object({
    id: z.string().optional(),
    status: zActionStatus,
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]),
    content: z.union([
        zSendMessageResponseContent,
        zReplyToMessageResponseContent,
        zLeaveGroupResponseContent,
        zJoinGroupResponseContent,
        zForwardMessageResponseContent,
        zBehaviouralResponseContent,
        zSendBulkMessagesResponseContent,
        z.null()
    ]),
    start_time: z.string().datetime(),
    end_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional()
});

export const zActivationRequest = z.object({
    profile_id: z.string(),
    verify_profile_exists: z.boolean().optional().default(false),
    should_override: z.boolean().optional().default(false),
    session_data: z.union([
        z.object({}),
        z.null()
    ]).optional()
});

export const zActivationStatus = z.enum([
    'CHECKING_PROFILE',
    'STARTED',
    'ALREADY_LOGGED_IN',
    'WAITING_FOR_OTP',
    'ENTERING_OTP',
    'CHECKING_IF_WAITING_FOR_PASSWORD',
    'WAITING_FOR_PASSWORD',
    'ENTERING_PASSWORD',
    'WAITING_10_SECONDS',
    'VERIFYING_LOGIN',
    'LOGIN_VERIFICATION_FAILED',
    'SKIPPED',
    'FAILED',
    'SUCCESS'
]);

export const zActivationResponse = z.object({
    status: zActivationStatus
});

export const zAsyncWorkerState = z.enum([
    'init',
    'starting',
    'stopping',
    'stopped',
    'idle',
    'working',
    'paused'
]);

export const zAttachment = z.object({
    url: z.string(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    mime_type: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zAuthRequest = z.object({
    profile_id: z.string(),
    otp: z.union([
        z.string(),
        z.null()
    ]).optional(),
    password: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zBehaviouralArgs = z.object({
    wait_time: z.number().int().optional().default(0),
    sync_context: z.boolean().optional().default(false),
    get_chats: z.boolean().optional().default(false),
    sync_personal_details: z.boolean().optional().default(false),
    disable_auto_download_media: z.boolean().optional().default(false),
    delete_all_active_sessions: z.boolean().optional().default(false)
});

export const zBehaviouralAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zBehaviouralArgs
});

export const zCharacter = z.object({
    id: z.string().optional()
});

export const zChatInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: z.union([
        zChatType,
        z.null()
    ]).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zInputMessage = z.object({
    text: z.union([
        z.string(),
        z.null()
    ]).optional(),
    attachments: z.array(zAttachment).optional().default([])
});

export const zForwardMessageArgs = z.object({
    from_chat: zChatInfo,
    message_info: zMessageInfo,
    target_chat: zChatInfo,
    message: zInputMessage.optional()
});

export const zForwardMessageAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zForwardMessageArgs
});

export const zValidationError = z.object({
    loc: z.array(z.unknown()),
    msg: z.string(),
    type: z.string()
});

export const zHttpValidationError = z.object({
    detail: z.array(zValidationError).optional()
});

export const zJoinGroupArgs = z.object({
    chat: z.union([
        zChatInfo,
        z.null()
    ]).optional(),
    join_discussion_group_if_availble: z.boolean().optional().default(false),
    invite_link: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zJoinGroupAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zJoinGroupArgs
});

export const zLeaveGroupArgs = z.object({
    chat: zChatInfo
});

export const zLeaveGroupAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zLeaveGroupArgs
});

export const zPrefrences = z.object({
    actions_timeout: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    action_interval: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    close_browser_when_finished: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    should_login_telegram: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    verify_proxy_working: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    fail_fast: z.union([
        z.boolean(),
        z.null()
    ]).optional()
});

export const zReplyToMessageArgs = z.object({
    chat: zChatInfo,
    message_info: zMessageInfo,
    input_message_content: zInputMessage
});

export const zReplyToMessageAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zReplyToMessageArgs
});

export const zSendMessageArgs = z.object({
    chat: zChatInfo,
    input_message_content: zInputMessage
});

export const zSendMessageAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zSendMessageArgs
});

export const zSendBulkMessagesArgs = z.object({
    chat: zChatInfo,
    messages: z.array(z.string()),
    interval: z.number().optional().default(1)
});

export const zSendBulkMessagesAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zSendBulkMessagesArgs
});

export const zScenario = z.object({
    id: z.string().optional(),
    profile: zCharacter,
    prefrences: zPrefrences.optional(),
    actions: z.array(z.unknown())
});

export const zScenarioResultStatus = z.enum([
    'success',
    'failed',
    'pending',
    'finished',
    'proxy_error',
    'browser_error',
    'telegram_error',
    'profile_not_logged_in',
    'profile_already_running',
    'profile_failed_to_start',
    'profile_startup_timeout',
    'profile_proxy_not_configured'
]);

export const zScenarioStatus = z.object({
    status_code: zScenarioResultStatus.optional(),
    error: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zScenarioInfo = z.object({
    start_time: z.string().datetime().optional(),
    end_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional()
});

export const zScenarioResult = z.object({
    id: z.string().optional(),
    status: zScenarioStatus.optional(),
    scenario_info: zScenarioInfo.optional(),
    actions_responses: z.array(zActionResponse).optional()
});

export const zProfileWorkerView = z.object({
    id: z.string().optional(),
    state: zAsyncWorkerState,
    current_scenario: z.union([
        zScenario,
        z.null()
    ]),
    current_scenario_result: z.union([
        zScenarioResult,
        z.null()
    ]),
    pending_actions: z.number().int(),
    browser_port: z.union([
        z.number().int(),
        z.null()
    ])
});

export const zScenarioWithResult = z.object({
    scenario: zScenario,
    result: zScenarioResult.optional()
});

export const zSubmitCredentialsResponse = z.object({
    success: z.boolean()
});

export const zTgAuthCredentialsResponse = z.object({
    otp: z.union([
        z.string(),
        z.null()
    ]).optional(),
    password: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zSubmitScenarioAsyncScenarioPostResponse = zScenario;

export const zSubmitScenarioSyncScenarioSyncSubmitPostResponse = zScenario;

export const zGetScenariosScenarioScenarioGetResponse = z.object({});

export const zGetScenarioByIdScenarioScenarioScenarioIdGetResponse = z.union([
    zScenarioWithResult,
    z.null()
]);

export const zGetAllCharactersCharactersGetResponse = z.array(zProfileWorkerView);

export const zCredentialsAuthCredentialsGetResponse = zTgAuthCredentialsResponse;

export const zSubmitCredentialsAuthPostResponse = zSubmitCredentialsResponse;

export const zActivateActivationActivatePostResponse = zActivationResponse;

export const zActivateWithSessionDataActivationActivateWithSessionDataPostResponse = zActivationResponse;

export const zGetStatusActivationStatusGetResponse = zActivationResponse;