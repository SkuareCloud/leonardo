// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zAccess = z.object({
    view: z.number().int(),
    update: z.number().int(),
    delete: z.number().int(),
    share: z.number().int(),
    usage: z.number().int()
});

export const zActionErrorCode = z.enum([
    'chat_not_found',
    'general_error',
    'account_muted',
    'send_message_error',
    'message_deleted',
    'sending_attachment_error',
    'did_not_find_message_after_sending',
    'username_not_valid',
    'failed_to_download_attachment',
    'join_group_chat_type_user',
    'account_in_slow_mode',
    'timeout',
    'can_not_resolve_phone_number',
    'tweet_does_not_exist',
    'tweet_is_unavailable',
    'tweet_page_load_failed'
]);

export const zActionPrefrences = z.object({
    fail_fast: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    timeout: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zActionStatusCode = z.enum([
    'success',
    'failed',
    'cancelled',
    'fail_fast',
    'running',
    'pending'
]);

export const zActionStatus = z.object({
    status_code: zActionStatusCode,
    error: z.union([
        z.string(),
        z.null()
    ]).optional(),
    error_code: z.union([
        zActionErrorCode,
        z.null()
    ]).optional()
});

export const zMessageInfo = z.object({
    timestamp: z.string(),
    peer_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    from_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    text_hash: z.union([
        z.string(),
        z.null()
    ]).optional(),
    message_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    viewer_id: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zSendMessageResponseContent = z.object({
    message_info: zMessageInfo
});

export const zReplyToMessageResponseContent = z.object({
    message_info: zMessageInfo
});

export const zLeaveGroupResponseContent = z.object({});

export const zChatType = z.enum([
    'User',
    'Group',
    'Channel',
    'Bot',
    'Unknown'
]);

export const zChannelInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    phone_number: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: zChatType.optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    read_inbox_max_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    read_outbox_max_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_mentions_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_reactions_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    subscribers: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zGroupInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    phone_number: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: zChatType.optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    read_inbox_max_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    read_outbox_max_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_mentions_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_reactions_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    members: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    online: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zJoinGroupResponseContent = z.object({
    chat_info: z.union([
        zChannelInfo,
        zGroupInfo,
        z.null()
    ]),
    discussion_group_chat_info: z.union([
        zChannelInfo,
        zGroupInfo,
        z.null()
    ])
});

export const zForwardMessageResponseContent = z.object({
    message_info: zMessageInfo
});

export const zChatInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    phone_number: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: z.union([
        zChatType,
        z.null()
    ]).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    read_inbox_max_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    read_outbox_max_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_mentions_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_reactions_count: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zBehaviouralResponseContent = z.object({
    current_context: z.union([
        z.unknown(),
        z.null()
    ]).optional(),
    chats: z.union([
        z.array(z.unknown()),
        z.null()
    ]).optional(),
    personal_details_synced: z.boolean().optional().default(false),
    auto_download_media_disabled: z.boolean().optional().default(false),
    all_active_sessions_deleted: z.boolean().optional().default(false),
    unread_messages: z.union([
        z.array(zChatInfo),
        z.null()
    ]).optional()
});

export const zSendBulkMessagesResponseContent = z.object({
    message_infos: z.array(zMessageInfo)
});

export const zReadMessagesResponseContent = z.object({
    messages_read: z.number().int()
});

export const zUserInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    phone_number: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: zChatType.optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    read_inbox_max_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    read_outbox_max_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_mentions_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    unread_reactions_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    subtitle: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zResolvePhoneResponseContent = z.object({
    user_info: z.union([
        zUserInfo,
        z.null()
    ]).optional(),
    error: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zTweetInteractionStatus = z.enum([
    'success',
    'failed',
    'already_done'
]);

export const zTweetInteractionResult = z.object({
    like: z.union([
        zTweetInteractionStatus,
        z.null()
    ]).optional(),
    retweet: z.union([
        zTweetInteractionStatus,
        z.null()
    ]).optional(),
    bookmark: z.union([
        zTweetInteractionStatus,
        z.null()
    ]).optional(),
    reply: z.union([
        zTweetInteractionStatus,
        z.null()
    ]).optional(),
    reply_tweet_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    quote: z.union([
        zTweetInteractionStatus,
        z.null()
    ]).optional(),
    quote_tweet_id: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zInteractWithTweetResponseContent = z.object({
    interaction_result: zTweetInteractionResult
});

export const zActionResponse = z.object({
    id: z.string().optional(),
    status: zActionStatus,
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]),
    content: z.union([
        zSendMessageResponseContent,
        zReplyToMessageResponseContent,
        zLeaveGroupResponseContent,
        zJoinGroupResponseContent,
        zForwardMessageResponseContent,
        zBehaviouralResponseContent,
        zSendBulkMessagesResponseContent,
        zReadMessagesResponseContent,
        zResolvePhoneResponseContent,
        zInteractWithTweetResponseContent,
        z.null()
    ]),
    start_time: z.string().datetime(),
    end_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional()
});

export const zActivationRequest = z.object({
    profile_id: z.string(),
    verify_profile_exists: z.boolean().optional().default(false),
    should_override: z.boolean().optional().default(false),
    session_data: z.union([
        z.object({}),
        z.null()
    ]).optional()
});

export const zActivationStatus = z.enum([
    'CHECKING_PROFILE',
    'STARTED',
    'ALREADY_LOGGED_IN',
    'WAITING_FOR_OTP',
    'ENTERING_OTP',
    'CHECKING_IF_WAITING_FOR_PASSWORD',
    'WAITING_FOR_PASSWORD',
    'ENTERING_PASSWORD',
    'WAITING_10_SECONDS',
    'VERIFYING_LOGIN',
    'LOGIN_VERIFICATION_FAILED',
    'SKIPPED',
    'FAILED',
    'SUCCESS'
]);

export const zActivationResponse = z.object({
    status: zActivationStatus
});

export const zCharacterProvider = z.enum([
    'avatar',
    'dolphin',
    'adspower'
]);

export const zAdspowerProfileData = z.object({
    profile_id: z.string(),
    profile_no: z.string(),
    name: z.string().optional().default(''),
    created_time: z.union([
        z.string(),
        z.null()
    ]).optional(),
    ip: z.union([
        z.string(),
        z.null()
    ]).optional(),
    ip_country: z.union([
        z.string(),
        z.null()
    ]).optional(),
    password: z.union([
        z.string(),
        z.null()
    ]).optional(),
    fbcc_proxy_acc_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    ipchecker: z.union([
        z.string(),
        z.null()
    ]).optional(),
    fakey: z.union([
        z.string(),
        z.null()
    ]).optional(),
    group_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    group_name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    remark: z.union([
        z.string(),
        z.null()
    ]).optional(),
    last_open_time: z.union([
        z.string(),
        z.null()
    ]).optional(),
    username: z.union([
        z.string(),
        z.null()
    ]).optional(),
    platform: z.union([
        z.string(),
        z.null()
    ]).optional(),
    category_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    id: z.string(),
    provider: zCharacterProvider.optional()
});

export const zAdspowerProfileIdentifier = z.object({
    profile_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    profile_no: z.union([
        z.string(),
        z.null()
    ]).optional(),
    profile_name: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zAsyncWorkerState = z.enum([
    'init',
    'starting',
    'stopping',
    'stopped',
    'idle',
    'working',
    'paused'
]);

export const zAttachment = z.object({
    url: z.string(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    mime_type: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zAudio = z.object({
    mode: z.string()
});

export const zAuthRequest = z.object({
    profile_id: z.string(),
    otp: z.union([
        z.string(),
        z.null()
    ]).optional(),
    password: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zProxyConfig = z.object({
    fqdn: z.union([
        z.string(),
        z.null()
    ]).optional(),
    ip_address: z.union([
        z.string(),
        z.null()
    ]).optional(),
    port: z.number().int(),
    username: z.string(),
    password: z.string(),
    status: z.string(),
    id: z.string()
});

export const zAvatarProfileData = z.object({
    id: z.string(),
    data_dir_path: z.union([
        z.string(),
        z.null()
    ]).optional(),
    proxy_config: z.union([
        zProxyConfig,
        z.null()
    ]).optional(),
    user_agent: z.union([
        z.string(),
        z.null()
    ]).optional(),
    phone_number: z.union([
        z.string(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    username: z.union([
        z.string(),
        z.null()
    ]).optional(),
    bio: z.union([
        z.string(),
        z.null()
    ]).optional(),
    provider: zCharacterProvider.optional()
});

export const zBaseProfileData = z.object({
    id: z.string(),
    provider: zCharacterProvider.optional()
});

export const zSyncPersonalDetailsArgs = z.object({
    first_name: z.string().optional().default(''),
    last_name: z.string().optional().default(''),
    bio: z.string().optional().default(''),
    username: z.string().optional().default('')
});

export const zBehaviouralArgs = z.object({
    wait_time: z.number().int().optional().default(0),
    sync_context: z.boolean().optional().default(false),
    get_chats: z.boolean().optional().default(false),
    sync_personal_details: z.union([
        zSyncPersonalDetailsArgs,
        z.null()
    ]).optional(),
    disable_auto_download_media: z.boolean().optional().default(false),
    delete_all_active_sessions: z.boolean().optional().default(false),
    get_unread_messages: z.boolean().optional().default(false)
});

export const zBehaviouralAction = z.object({
    id: z.string().optional(),
    platform: z.enum([
        'telegram',
        'twitter'
    ]).optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zBehaviouralArgs
});

export const zCpu = z.object({
    mode: z.string(),
    value: z.number().int()
});

export const zCanvas = z.object({
    mode: z.string()
});

export const zCharacter = z.object({
    id: z.string().optional(),
    provider: zCharacterProvider.optional()
});

export const zClientRect = z.object({
    mode: z.string()
});

export const zConnection = z.object({
    downlink: z.number(),
    effectiveType: z.string(),
    rtt: z.number().int(),
    saveData: z.boolean()
});

export const zDeviceName = z.object({
    mode: z.string(),
    value: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zProfileStatus = z.object({
    id: z.number().int().optional().default(0),
    name: z.string().optional().default(''),
    color: z.string().optional().default('')
});

export const zDolphinBrowserProfileView = z.object({
    id: z.string(),
    name: z.string(),
    tags: z.array(z.string()).optional().default([]),
    status: z.union([
        zProfileStatus,
        z.null()
    ]).optional()
});

export const zUserAgent = z.object({
    mode: z.string(),
    value: z.string()
});

export const zWebRtc = z.object({
    mode: z.string(),
    ipAddress: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zWebGl = z.object({
    mode: z.string()
});

export const zWebGlInfo = z.object({
    mode: z.string(),
    vendor: z.union([
        z.string(),
        z.null()
    ]).optional(),
    renderer: z.union([
        z.string(),
        z.null()
    ]).optional(),
    webgl2Maximum: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zNotes = z.object({
    content: z.union([
        z.string(),
        z.null()
    ]).optional(),
    color: z.string().optional().default('blue'),
    style: z.string().optional().default('text'),
    icon: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zTimezone = z.object({
    mode: z.string(),
    value: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zLocale = z.object({
    mode: z.string(),
    value: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zProxy = z.object({
    id: z.number().int(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: z.union([
        z.string(),
        z.null()
    ]).optional(),
    host: z.union([
        z.string(),
        z.null()
    ]).optional(),
    port: z.union([
        z.string(),
        z.null()
    ]).optional(),
    login: z.union([
        z.string(),
        z.null()
    ]).optional(),
    password: z.union([
        z.string(),
        z.null()
    ]).optional(),
    savedByUser: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    cryptoKeyId: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    changeIpUrl: z.union([
        z.string(),
        z.null()
    ]).optional(),
    provider: z.union([
        z.string(),
        z.null()
    ]).optional(),
    lastCheck: z.union([
        z.object({}),
        z.null()
    ]).optional()
});

export const zPorts = z.object({
    mode: z.string(),
    blacklist: z.string()
});

export const zGeolocation = z.object({
    mode: z.string(),
    latitude: z.union([
        z.number(),
        z.null()
    ]).optional(),
    longitude: z.union([
        z.number(),
        z.null()
    ]).optional(),
    accuracy: z.union([
        z.number(),
        z.null()
    ]).optional()
});

export const zMemory = z.object({
    mode: z.string(),
    value: z.number().int()
});

export const zScreen = z.object({
    width: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    height: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    mode: z.string(),
    resolution: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zExtension = z.object({
    url: z.string(),
    type: z.string(),
    hash: z.string()
});

export const zHomepagePivot = z.object({
    profileId: z.number().int(),
    homepageId: z.number().int()
});

export const zHomepage = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    url: z.union([
        z.string(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    order: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    pivot: z.union([
        zHomepagePivot,
        z.null()
    ]).optional()
});

export const zWebGpu = z.object({
    mode: z.string(),
    value: z.string()
});

export const zMacAddress = z.object({
    mode: z.string(),
    value: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zProfileAutomationData = z.object({
    port: z.number().int(),
    wsEndpoint: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zDolphinProfileData = z.object({
    id: z.string(),
    teamId: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    userId: z.number().int(),
    name: z.string(),
    tags: z.array(z.string()).optional().default([]),
    platform: z.string(),
    browserType: z.string(),
    mainWebsite: z.string().optional().default(''),
    useragent: zUserAgent,
    webrtc: zWebRtc,
    canvas: zCanvas,
    webgl: zWebGl,
    webglInfo: zWebGlInfo,
    clientRect: zClientRect,
    notes: zNotes,
    timezone: zTimezone,
    locale: zLocale,
    tabs: z.union([
        z.array(z.string()),
        z.null()
    ]).optional(),
    proxyId: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    proxy: z.union([
        zProxy,
        z.null()
    ]).optional(),
    ports: zPorts,
    access: zAccess,
    status: z.union([
        zProfileStatus,
        z.null()
    ]).optional(),
    running: z.number().int().optional().default(0),
    lastRunningTime: z.union([
        z.string(),
        z.null()
    ]).optional(),
    lastRunnedByUserId: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    lastRunUuid: z.union([
        z.string(),
        z.null()
    ]).optional(),
    lastStartTime: z.union([
        z.string(),
        z.null()
    ]).optional(),
    geolocation: zGeolocation,
    cpu: zCpu,
    memory: zMemory,
    platformName: z.string(),
    cpuArchitecture: z.string(),
    osVersion: z.union([
        z.string(),
        z.number().int()
    ]),
    platformVersion: z.string(),
    screen: zScreen,
    screenWidth: z.union([
        z.string(),
        z.null()
    ]).optional(),
    screenHeight: z.union([
        z.string(),
        z.null()
    ]).optional(),
    connection: z.union([
        zConnection,
        z.null()
    ]).optional(),
    connectionDownlink: z.union([
        z.number(),
        z.null()
    ]).optional(),
    connectionEffectiveType: z.union([
        z.string(),
        z.null()
    ]).optional(),
    connectionRtt: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    connectionSaveData: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    vendorSub: z.string().optional().default(''),
    productSub: z.union([
        z.string(),
        z.number().int()
    ]),
    vendor: z.string(),
    product: z.string(),
    doNotTrack: z.boolean().optional().default(false),
    args: z.array(z.string()).optional().default([]),
    appCodeName: z.string(),
    userFields: z.union([
        z.string(),
        z.null()
    ]).optional(),
    login: z.string().optional().default(''),
    password: z.string().optional().default(''),
    storagePath: z.string().optional().default(''),
    datadirHash: z.union([
        z.string(),
        z.null()
    ]).optional(),
    cookiesHash: z.union([
        z.string(),
        z.null()
    ]).optional(),
    extensions: z.array(zExtension).optional().default([]),
    bookmarks: z.array(z.string()).optional().default([]),
    homepages: z.array(zHomepage).optional().default([]),
    extensionsNewNaming: z.union([
        z.boolean(),
        z.number().int()
    ]),
    archived: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    transfer: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    webgpu: z.union([
        zWebGpu,
        z.null()
    ]).optional(),
    recoverCount: z.union([
        z.string(),
        z.null()
    ]).optional(),
    cloudSyncDisabled: z.union([
        z.string(),
        z.null()
    ]).optional(),
    cloudSyncDisabledOnMachineId: z.union([
        z.string(),
        z.null()
    ]).optional(),
    sortingName: z.union([
        z.string(),
        z.null()
    ]).optional(),
    addedSortingName: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    sorting_name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    macAddress: z.union([
        zMacAddress,
        z.null()
    ]).optional(),
    deviceName: z.union([
        zDeviceName,
        z.null()
    ]).optional(),
    fontsMode: z.union([
        z.string(),
        z.null()
    ]).optional(),
    isHiddenProfileName: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    enableArgIsChromeIcon: z.union([
        z.string(),
        z.null()
    ]).optional(),
    disableLoadWebCameraAndCookies: z.union([
        z.string(),
        z.null()
    ]).optional(),
    audio: z.union([
        zAudio,
        z.null()
    ]).optional(),
    pinned: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    folder: z.union([
        z.string(),
        z.null()
    ]).optional(),
    requirePassword: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    transferToEmail: z.union([
        z.string(),
        z.null()
    ]).optional(),
    transferStatus: z.union([
        z.string(),
        z.null()
    ]).optional(),
    transferHandleDate: z.union([
        z.string(),
        z.null()
    ]).optional(),
    transferWithProxy: z.union([
        z.string(),
        z.null()
    ]).optional(),
    created_at: z.union([
        z.string(),
        z.null()
    ]).optional(),
    updated_at: z.union([
        z.string(),
        z.null()
    ]).optional(),
    deleted_at: z.union([
        z.string(),
        z.null()
    ]).optional(),
    totalSessionDuration: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    uaFullVersion: z.union([
        z.string(),
        z.null()
    ]).optional(),
    automation: z.union([
        zProfileAutomationData,
        z.null()
    ]).optional(),
    provider: zCharacterProvider.optional()
});

export const zInputMessage = z.object({
    text: z.union([
        z.string(),
        z.null()
    ]).optional(),
    attachments: z.array(zAttachment).optional().default([])
});

export const zForwardMessageArgs = z.object({
    from_chat: z.union([
        zChatInfo,
        z.null()
    ]).optional(),
    message_info: z.union([
        zMessageInfo,
        z.null()
    ]).optional(),
    target_chat: zChatInfo,
    message: zInputMessage.optional(),
    message_link: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zForwardMessageAction = z.object({
    id: z.string().optional(),
    platform: z.enum([
        'telegram',
        'twitter'
    ]).optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zForwardMessageArgs
});

export const zValidationError = z.object({
    loc: z.array(z.unknown()),
    msg: z.string(),
    type: z.string()
});

export const zHttpValidationError = z.object({
    detail: z.array(zValidationError).optional()
});

export const zTweetContent = z.object({
    text: z.string(),
    media: z.union([
        z.array(z.string()),
        z.null()
    ]).optional()
});

export const zTweetInteraction = z.object({
    like: z.boolean().optional().default(false),
    retweet: z.boolean().optional().default(false),
    bookmark: z.boolean().optional().default(false),
    reply: z.union([
        zTweetContent,
        z.null()
    ]).optional(),
    quote: z.union([
        zTweetContent,
        z.null()
    ]).optional()
});

export const zInteractWithTweetArgs = z.object({
    url: z.string(),
    interaction: zTweetInteraction
});

export const zInteractWithTweetAction = z.object({
    id: z.string().optional(),
    platform: z.enum([
        'telegram',
        'twitter'
    ]).optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zInteractWithTweetArgs
});

export const zJoinGroupArgs = z.object({
    chat: z.union([
        zChatInfo,
        z.null()
    ]).optional(),
    join_discussion_group_if_availble: z.boolean().optional().default(false),
    invite_link: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zJoinGroupAction = z.object({
    id: z.string().optional(),
    platform: z.enum([
        'telegram',
        'twitter'
    ]).optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zJoinGroupArgs
});

export const zLeaveGroupArgs = z.object({
    chat: zChatInfo
});

export const zLeaveGroupAction = z.object({
    id: z.string().optional(),
    platform: z.enum([
        'telegram',
        'twitter'
    ]).optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zLeaveGroupArgs
});

export const zPrefrences = z.object({
    actions_timeout: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    action_interval: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    close_browser_when_finished: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    should_login_telegram: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    verify_proxy_working: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    fail_fast: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    hide_content: z.union([
        z.boolean(),
        z.null()
    ]).optional()
});

export const zReplyToMessageArgs = z.object({
    chat: z.union([
        zChatInfo,
        z.null()
    ]).optional(),
    message_info: z.union([
        zMessageInfo,
        z.null()
    ]).optional(),
    input_message_content: zInputMessage,
    message_link: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zReplyToMessageAction = z.object({
    id: z.string().optional(),
    platform: z.enum([
        'telegram',
        'twitter'
    ]).optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zReplyToMessageArgs
});

export const zSendMessageArgs = z.object({
    chat: zChatInfo,
    input_message_content: zInputMessage
});

export const zSendMessageAction = z.object({
    id: z.string().optional(),
    platform: z.enum([
        'telegram',
        'twitter'
    ]).optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zSendMessageArgs
});

export const zSendBulkMessagesArgs = z.object({
    chat: zChatInfo,
    messages: z.array(z.string()),
    interval: z.number().optional().default(1)
});

export const zSendBulkMessagesAction = z.object({
    id: z.string().optional(),
    platform: z.enum([
        'telegram',
        'twitter'
    ]).optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zSendBulkMessagesArgs
});

export const zReadMessagesArgs = z.object({
    chat: zChatInfo,
    amount_messages: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    read_all_in_end: z.boolean().optional().default(false)
});

export const zReadMessagesAction = z.object({
    id: z.string().optional(),
    platform: z.enum([
        'telegram',
        'twitter'
    ]).optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zReadMessagesArgs
});

export const zResolvePhoneArgs = z.object({
    phone_number: z.string()
});

export const zResolvePhoneAction = z.object({
    id: z.string().optional(),
    platform: z.enum([
        'telegram',
        'twitter'
    ]).optional(),
    type: z.enum([
        'send_message',
        'send_bulk_messages',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural',
        'read_messages',
        'resolve_phone',
        'interact_with_tweet'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zResolvePhoneArgs
});

export const zScenario = z.object({
    id: z.string().optional(),
    profile: zCharacter,
    prefrences: zPrefrences.optional(),
    actions: z.array(z.unknown())
});

export const zScenarioResultStatus = z.enum([
    'success',
    'failed',
    'pending',
    'finished',
    'proxy_error',
    'browser_error',
    'telegram_error',
    'profile_not_logged_in',
    'profile_already_running',
    'profile_failed_to_start',
    'profile_startup_timeout',
    'profile_proxy_not_configured'
]);

export const zScenarioStatus = z.object({
    status_code: zScenarioResultStatus.optional(),
    error: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zScenarioInfo = z.object({
    start_time: z.string().datetime().optional(),
    end_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional()
});

export const zScenarioResult = z.object({
    id: z.string().optional(),
    status: zScenarioStatus.optional(),
    scenario_info: zScenarioInfo.optional(),
    actions_responses: z.array(zActionResponse).optional()
});

export const zProfileWorkerView = z.object({
    id: z.string().optional(),
    state: zAsyncWorkerState,
    current_scenario: z.union([
        zScenario,
        z.null()
    ]),
    current_scenario_result: z.union([
        zScenarioResult,
        z.null()
    ]),
    pending_actions: z.number().int(),
    browser_port: z.union([
        z.number().int(),
        z.null()
    ])
});

export const zScenarioWithResult = z.object({
    scenario: zScenario,
    result: zScenarioResult.optional()
});

export const zSubmitCredentialsResponse = z.object({
    success: z.boolean()
});

export const zTgAuthCredentialsResponse = z.object({
    otp: z.union([
        z.string(),
        z.null()
    ]).optional(),
    password: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zSubmitScenarioAsyncScenarioPostResponse = zScenario;

export const zSubmitScenarioSyncScenarioSyncSubmitPostResponse = zScenario;

export const zGetScenariosScenarioScenarioGetResponse = z.object({});

export const zGetScenarioByIdScenarioScenarioScenarioIdGetResponse = z.union([
    zScenarioWithResult,
    z.null()
]);

export const zGetAllCharactersCharactersGetResponse = z.array(zProfileWorkerView);

export const zGetAllProfilesCharactersAllGetResponse = z.array(z.unknown());

export const zCredentialsAuthCredentialsGetResponse = zTgAuthCredentialsResponse;

export const zSubmitCredentialsAuthPostResponse = zSubmitCredentialsResponse;

export const zActivateActivationActivatePostResponse = zActivationResponse;

export const zActivateWithSessionDataActivationActivateWithSessionDataPostResponse = zActivationResponse;

export const zGetStatusActivationStatusGetResponse = zActivationResponse;

export const zGetAdspowerProfileScrapeAdspowerScrapeGetResponse = z.string();

export const zGetAllStatusesDolphinStatusesGetResponse = z.array(zProfileStatus);

export const zGetAllProfilesDolphinProfilesGetResponse = z.array(zDolphinBrowserProfileView);