// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zActionPrefrences = z.object({
    fail_fast: z.union([
        z.boolean(),
        z.null()
    ]).optional()
});

export const zActionStatusCode = z.enum([
    'success',
    'failed',
    'cancelled'
]);

export const zActionStatus = z.object({
    status_code: zActionStatusCode,
    error: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zMessageInfo = z.object({
    timestamp: z.string(),
    peer_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    from_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    text_hash: z.union([
        z.string(),
        z.null()
    ]).optional(),
    message_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    viewer_id: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zSendMessageResponseContent = z.object({
    message_info: zMessageInfo
});

export const zReplyToMessageResponseContent = z.object({
    message_info: zMessageInfo
});

export const zLeaveGroupResponseContent = z.object({});

export const zChatType = z.enum([
    'User',
    'Group',
    'Channel',
    'Bot',
    'Unknown'
]);

export const zChannelInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: zChatType.optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    subscribers: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zGroupInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: zChatType.optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    members: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    online: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zJoinGroupResponseContent = z.object({
    chat_info: z.union([
        zChannelInfo,
        zGroupInfo,
        z.null()
    ]),
    discussion_group_chat_info: z.union([
        zChannelInfo,
        zGroupInfo,
        z.null()
    ])
});

export const zForwardMessageResponseContent = z.object({
    message_info: zMessageInfo
});

export const zDialogValue = z.object({
    peerId: z.number().int(),
    read_inbox_max_id: z.number().int(),
    read_outbox_max_id: z.number().int(),
    top_message: z.number().int(),
    unread_count: z.number().int(),
    unread_mentions_count: z.number().int(),
    unread_reactions_count: z.number().int()
});

export const zBehaviouralResponseContent = z.object({
    current_context: z.union([
        z.unknown(),
        z.null()
    ]).optional(),
    chats: z.union([
        z.array(zDialogValue),
        z.null()
    ]).optional()
});

export const zActionResponse = z.object({
    id: z.string().optional(),
    status: zActionStatus,
    type: z.enum([
        'send_message',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]),
    content: z.union([
        zSendMessageResponseContent,
        zReplyToMessageResponseContent,
        zLeaveGroupResponseContent,
        zJoinGroupResponseContent,
        zForwardMessageResponseContent,
        zBehaviouralResponseContent,
        z.null()
    ]),
    start_time: z.string().datetime()
});

export const zActivationRequest = z.object({
    profile_id: z.string(),
    verify_profile_exists: z.boolean().optional().default(false),
    should_override: z.boolean().optional().default(false)
});

export const zActivationStatus = z.enum([
    'ACTIVATION_STARTED'
]);

export const zActivationResponse = z.object({
    status: zActivationStatus
});

export const zAsyncWorkerState = z.enum([
    'init',
    'starting',
    'stopping',
    'stopped',
    'idle',
    'working',
    'paused'
]);

export const zAuthRequest = z.object({
    profile_id: z.string(),
    otp: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    password: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zBehaviouralArgs = z.object({
    wait_time: z.number().int().optional().default(0),
    sync_context: z.boolean().optional().default(false),
    get_chats: z.boolean().optional().default(false)
});

export const zBehaviouralAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zBehaviouralArgs
});

export const zCharacter = z.object({
    id: z.string().optional()
});

export const zChatInfo = z.object({
    id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    type: z.union([
        zChatType,
        z.null()
    ]).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zForwardMessageArgs = z.object({
    from_chat: zChatInfo,
    message_info: zMessageInfo,
    target_chat: zChatInfo,
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zForwardMessageAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zForwardMessageArgs
});

export const zValidationError = z.object({
    loc: z.array(z.unknown()),
    msg: z.string(),
    type: z.string()
});

export const zHttpValidationError = z.object({
    detail: z.array(zValidationError).optional()
});

export const zJoinGroupArgs = z.object({
    chat: zChatInfo,
    join_discussion_group_if_availble: z.boolean().optional().default(false)
});

export const zJoinGroupAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zJoinGroupArgs
});

export const zLeaveGroupArgs = z.object({
    chat: zChatInfo
});

export const zLeaveGroupAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zLeaveGroupArgs
});

export const zPrefrences = z.object({
    actions_timeout: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    action_interval: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    close_browser_when_finished: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    should_login_telegram: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    verify_proxy_working: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    fail_fast: z.union([
        z.boolean(),
        z.null()
    ]).optional()
});

export const zReplyToMessageArgs = z.object({
    chat: zChatInfo,
    message_info: zMessageInfo,
    input_message_content: z.string()
});

export const zReplyToMessageAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zReplyToMessageArgs
});

export const zSendMessageArgs = z.object({
    chat: zChatInfo,
    input_message_content: z.string()
});

export const zSendMessageAction = z.object({
    id: z.string().optional(),
    type: z.enum([
        'send_message',
        'join_group',
        'leave_group',
        'reply_to_message',
        'forward_message',
        'behavioural'
    ]).optional(),
    prefrences: zActionPrefrences.optional(),
    args: zSendMessageArgs
});

export const zScenario = z.object({
    id: z.string().optional(),
    profile: zCharacter,
    prefrences: zPrefrences,
    actions: z.array(z.unknown())
});

export const zScenarioResultStatus = z.enum([
    'success',
    'failed',
    'pending',
    'finished'
]);

export const zScenarioStatus = z.object({
    status_code: zScenarioResultStatus,
    error: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zScenarioInfo = z.object({
    start_time: z.string().datetime(),
    end_time: z.union([
        z.string().datetime(),
        z.null()
    ]).optional()
});

export const zScenarioResult = z.object({
    id: z.string().optional(),
    status: zScenarioStatus,
    scenario_info: zScenarioInfo,
    actions_responses: z.array(zActionResponse)
});

export const zProfileWorkerView = z.object({
    id: z.string().optional(),
    state: zAsyncWorkerState,
    current_scenario: z.union([
        zScenario,
        z.null()
    ]),
    current_scenario_result: z.union([
        zScenarioResult,
        z.null()
    ]),
    pending_actions: z.number().int()
});

export const zScenarioWithResult = z.object({
    scenario: zScenario,
    result: z.union([
        zScenarioResult,
        z.null()
    ]).optional()
});

export const zTgAuthCredentials = z.object({
    otp: z.union([
        z.string(),
        z.null()
    ]).optional(),
    password: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zSubmitScenarioAsyncScenarioPostResponse = zScenario;

export const zSubmitScenarioSyncScenarioSyncSubmitPostResponse = zScenario;

export const zGetScenariosScenarioScenarioGetResponse = z.object({});

export const zGetScenarioByIdScenarioScenarioScenarioIdGetResponse = z.union([
    zScenarioWithResult,
    z.null()
]);

export const zGetAllCharactersCharactersGetResponse = z.array(zProfileWorkerView);

export const zCredentialsAuthCredentialsGetResponse = zTgAuthCredentials;

export const zActivateActivationActivatePostResponse = zActivationResponse;